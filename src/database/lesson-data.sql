DROP TABLE IF EXISTS `lesson`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `lesson` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `namelesson` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `tutorial` text COLLATE utf8_unicode_ci,
  `database_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKt2o5xpjsofbydkwd7xd9i7nnc` (`database_id`)
) ENGINE=MyISAM AUTO_INCREMENT=92 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `lesson`
--

LOCK TABLES `lesson` WRITE;
/*!40000 ALTER TABLE `lesson` DISABLE KEYS */;
INSERT INTO `lesson` VALUES (1,'Giới thiệu','<p><b>[Học MySQL cơ bản và nâng cao]</b>MySQL là hệ thống quản lý cơ sở dữ liệu nguồn mở phổ biến nhất. MySQL là một trong những RDBMS tốt nhất đang được sử dụng để phát triển các ứng dụng phần mềm trên Web.</p>\r\n<p>Loạt bài hướng dẫn này cung cấp cho bạn kiến thức cơ bản về MySQL, cung cấp nhiều ví dụ minh họa giúp bạn hiểu sâu hơn về các khái niệm, lệnh, hay mệnh đề trong MySQL được trình bày trong loạt bài này.</p>',2),(2,'MySQL là gì','<h2>Cơ sở dữ liệu là gì?</h2>\r\n<p>Một Database (Cơ sở dữ liệu) là một ứng dụng riêng rẽ mà lưu trữ một tập hợp dữ liệu. Mỗi cơ sở dữ liệu có một hoặc nhiều API riêng biệt để tạo, truy cập, quản lý, tìm kiếm và tái tạo dữ liệu nó đang giữ.</p>\r\n<p>Một số loại kho lưu dữ liệu khác có thể được sử dụng, chẳng hạn như file trên hệ thống file hoặc các Hash Table lớn, nhưng việc lấy và ghi dữ liệu không thể nhanh và dễ dàng với các loại kho lưu dữ liệu này của các hệ thống.</p>\r\n<p>Vì thế, ngày nay, chúng ta sử dụng các Hệ thống quản lý cơ sở dữ liệu quan hệ (RDBMS) lưu giữ và quản lý khối lượng lớn dữ liệu. Nó được gọi là cơ sở dữ liệu quan hệ, bởi vì tất cả dữ liệu được lưu giữ trong các bảng dữ liệu khác nhau và các mối quan hệ được thành lập bởi sử dụng các Primary Key (khóa chính) và một số khóa khác được biết đến như là Foreign Key.</p>\r\n<p>Một <b>Hệ thống quản lý cơ sở dữ liệu quan hệ (RDBMS)</b> là một phần mềm mà:</p>\r\n<ul class=\"list\">\r\n<li><p>Cho bạn khả năng triển khai một Database với các bảng dữ liệu, cột (column), và các chỉ mục (Index).</p></li>\r\n<li><p>Bảo đảm Referential Integrity (có thể dịch là toàn vẹn quan hệ) giữa các hàng và các bảng đa dạng.</p></li>\r\n<li><p>Cập nhật tự động các chỉ mục.</p></li>\r\n<li><p>Thông dịch một truy vấn SQL và tổ hợp thông tin từ các bảng khác nhau.</p></li>\r\n</ul> <h2>Thuật ngữ RDBMS</h2>\r\n<p>Trước khi đi vào khái niệm hệ thống cơ sở dữ liệu MySQL, chúng ta cùng xem lại một số định nghĩa liên quan tới cơ sở dữ liệu:</p>\r\n<ul class=\"list\">\r\n<li><p><b>Database:</b> Một cơ sở dữ liệu là một tập hợp các bảng dữ liệu, với dữ liệu có liên quan.</p></li>\r\n<li><p><b>Bảng dữ liệu:</b> Một bảng là một ma trận dữ liệu. Một bảng trong một cơ sở dữ liệu trông giống như một bảng tính đơn giản.</p></li>\r\n<li><p><b>Cột:</b> Một cột chứa cùng một kiểu dữ liệu, ví dụ như tên khách hàng.</p></li>\r\n<li><p><b>Hàng:</b> Một hàng (row, entry, record) là một nhóm dữ liệu có liên quan.</p></li>\r\n<li><p><b>Redundancy:</b> (có thể hiểu là dữ liệu dự phòng) Dữ liệu được lưu giữ hai lần, để làm cho hệ thống nhanh hơn.</p></li>\r\n<li><p><b>Primary Key:</b> Một Primary Key (Khóa chính) là duy nhất. Một giá trị key không thể xuất hiện hai lần trong một bảng. Với một key, bạn có thể tìm thấy phần lớn trên một hàng. </p></li>\r\n<li><p><b>Foreign Key:</b> Bạn tưởng tượng về Foreign Key như là cái ghim liên kết giữa hai bảng.</p></li>\r\n<li><p><b>Compound Key:</b> Một Compound Key (hay composite key) là một key mà gồm nhiều cột, bởi vì một cột là không duy nhất.</p></li>\r\n<li><p><b>Index:</b> Một chỉ mục trong một cơ sở dữ liệu tương tự như chỉ mục trong một cuốn sách.</p></li>\r\n<li><p><b>Referential Integrity:</b> Đảm bảo rằng một giá trị Foreign Key luôn luôn trỏ tới một hàng đang tồn tại.</p></li>\r\n</ul>\r\n<h2>MySQL là gì:</h2>\r\n<p>MySQL là một RDBMS nhanh và dễ dàng để sử dụng. MySQL đang được sử dụng cho nhiều công việc kinh doanh từ lớn tới nhỏ. MySQL được phát triển, được công bố, được hỗ trợ bởi MySQL AB, là một công ty của Thụy Điển. MySQL trở thành khá phổ biến vì nhiều lý do:</p>\r\n<ul class=\"list\">\r\n<li><p>MySQL là mã ngồn mở. Vì thế, để sử dụng nó, bạn chẳng phải mất một xu nào.</p></li>\r\n<li><p>MySQL là một chương trình rất mạnh mẽ. </p></li>\r\n<li><p>MySQL sử dụng một Form chuẩn của ngôn ngữ dữ liệu nổi tiếng là SQL.</p></li>\r\n<li><p>MySQL làm việc trên nhiều Hệ điều hành và với nhiều ngôn ngữ như PHP, PERL, C, C++, Java, …</p></li>\r\n<li><p>MySQL làm việc nhanh và khỏe ngay cả với các tập dữ liệu lớn.</p></li>\r\n<li><p>MySQL rất thân thiện với PHP, một ngôn ngữ rất đáng giá để tìm hiểu để phát triển Web.</p></li>\r\n<li><p>MySQL hỗ trợ các cơ sở dữ liệu lớn, lên tới 50 triệu hàng hoặc nhiều hơn nữa trong một bảng. Kích cỡ file mặc định được giới hạn cho một bảng là 4 GB, nhưng bạn có thể tăng kích cỡ này (nếu hệ điều hành của bạn có thể xử lý nó) để đạt tới giới hạn lý thuyết là 8 TB.</p></li>\r\n<li><p>MySQL là có thể điều chỉnh. Giấy phép GPL mã nguồn mở cho phép lập trình viên sửa đổi phần mềm MySQL để phù hợp với môi trường cụ thể của họ.</p></li>\r\n</ul>\r\n',2),(3,'Cài đặt','<h2>Tải MySQL</h2>\n<p>Bạn có thể tải MySQL tại: <a href=\"http://www.mysql.com/downloads\" target=\"_blank\">MySQL Downloads</a>. Chọn phiên bản <i>MySQL Community Server</i> bạn muốn và phù hợp với nền tảng của bạn.</p>\n<h2>Cài đặt MySQL trên Linux/Unix</h2>\n<p>Bạn nên cài đặt MySQL trên hệ thống Linux thông qua RPM. MySQL AB cung cấp sẵn RPM cho bạn tải về.</p>\n<ul class=\"list\">\n<li><p><b>MySQL -</b> MySQL Database Server, quản lý cơ sở dữ liệu và bảng, điều khiển sự truy cập của người dùng, và xử lý các truy vấn SQL</p></li>\n<li><p><b>MySQL-client -</b> Các chương trình MySQL Client, giúp nó có thể để kết nối và tương tác với Server.</p></li>\n<li><p><b>MySQL-devel -</b> Các thư viện và Header file khá là thuận tiện khi biên dịch các chương trình khác mà sử dụng MySQL</p></li>\n<li><p><b>MySQL-shared - </b> Các thư viện có thể chia sẻ cho MySQL Client.</p></li>\n<li><p><b>MySQL-bench  - </b> Tiêu chuẩn thử nghiệm các tool cho MySQL Database Server.</p></li>\n</ul>\n<p>MySQL RPMs, mà được liệt kê ở đây, là được xây dựng trên một hệ thống SuSE Linux, nhưng chúng thường làm việc trên các phiên bản Linux khác mà không gấp phải vấn đề gì.</p>\n<p>Dưới đây là các bước để cài đặt:</p>\n<ul class=\"list\">\n<li><p>Đăng nhập hệ thống bởi sử dụng root user.</p></li>\n<li><p>Chuyển tới thư mục chứa RPMs.</p></li>\n<li><p>Cài đặt MySQL Database Server bằng việc thực thi lệnh sau. Bạn nhớ thay thế filename trong chữ in nghiêng với tên tệp của RPM của bạn.</p>\n<pre class=\"prettyprint notranslate\">\n[root@host]# rpm -i <i>MySQL-5.0.9-0.i386.rpm</i>\n</pre>\n<p>Lệnh trên sẽ xử lý việc cài đặt MySQL Server, tạo một user của MySQL, tạo cấu hình cần thiết và bắt đầu MySQL Server một cách tự động.</p>\n<p>Bạn có thể tìm tất cả /usr/bin và /usr/sbin liên quan tới MySQL. Tất cả bảng và cơ sở dữ liệu sẽ được tạo trong thư mục /var/lib/mysql.</p>\n</li><li><p>Phần này là tùy ý, nhưng cũng giới thiệu cho bạn để cài đặt RPMs theo cùng cách thức:</p>\n<pre class=\"prettyprint notranslate\">\n[root@host]# rpm -i MySQL-client-5.0.9-0.i386.rpm\n[root@host]# rpm -i MySQL-devel-5.0.9-0.i386.rpm\n[root@host]# rpm -i MySQL-shared-5.0.9-0.i386.rpm\n[root@host]# rpm -i MySQL-bench-5.0.9-0.i386.rpm\n</pre>\n</li>\n</ul>\n<h2>Cài đặt MySQL trên Windows</h2>\n<p>Bây giờ, cài đặt mặc định trên bất kỳ phiên bản Windows nào là dễ dàng hơn để sử dụng, khi MySQL được đóng gói hoàn toàn với một Installer. Bạn chỉ cần tải Installer package này, unzip nó ở bất cứ đâu, và chạy setup.exe.</p>\n<p>Installer mặc định setup.exe sẽ đưa bạn qua một tiến trình thông thường và theo mặc định sẽ cài đặt mọi thứ dưới C:mysql.</p>\n<p>Kiểm tra Server bằng việc kích hoạt nó từ Command Prompt lần đầu tiên. Tới location của mysqld server mà có thể là C:mysqlin, và soạn:</p>\n<pre class=\"prettyprint notranslate\">\nmysqld.exe --console\n</pre>\n<p><b>Ghi chú:</b> Nếu bạn đang sử dụng NT, thì bạn sẽ phải sử dụng mysqld-nt.exe thay vì mysqld.exe. </p>\n<p>Nếu tất cả hoạt động tốt, bạn sẽ thấy một số thông báo về Startup và InnoDB. Nếu không, bạn có thể có một thông báo về giấy phép. Đảm bảo rằng thư mục mà lưu giữ dữ liệu là có thể truy cập với bất kỳ người dùng nào (có thể là mysql).</p>\n<p>MySQl không thêm phần Start Menu, và không có GUI để dừng Server. Vì thế, nếu bạn muốn kích đúp chuột để khởi động Server, bạn nên nhớ dừng tiến trình này bằng tay bởi sử dụng mysqladmin, Task List, Task Manager, hoặc các cách thức cụ thể cho Windows khác.</p>\n<h2>Kiểm tra cài đặt MySQL:</h2>\n<p>Sau khi MySQL đã được cài đặt thành công, các bảng cơ sở đã được khởi tạo, và Server đã được khởi động, bạn có thể kiểm tra rằng mọi thứ có đang làm việc tốt không thông qua một số kiểm tra đơn giản.</p>\n<h2>Sử dụng mysqladmin Utility để lấy trạng thái Server</h2>\n<p>Sử dụng <b>mysqladmin</b> binary để kiểm tra phiên bản Server. Binary này sẽ có sẵn trong /usr/bin trên Linux hoặc trong C:mysqlin trên Windows.</p>\n<pre class=\"prettyprint notranslate\">\n[root@host]# mysqladmin --version\n</pre>\n<p>Nó sẽ cho kết quả sau trên Linux. Kết quả có thể đa dạng tùy thuộc vào cài đặt của bạn.</p>\n<pre class=\"prettyprint notranslate\">\nmysqladmin  Ver 8.23 Distrib 5.0.9-0, for redhat-linux-gnu on i386\n</pre>\n<p>Nếu bạn không nhận được thông báo như thế, thì có thể đã có một số vấn đề trong cài đặt của bạn và bạn nên cần sửa nó.</p><h2>Thực thi các lệnh SQL đơn giản bởi sử dụng MySQL Client</h2>\n<p>Bạn có thể kết nối với MySQL Server của bạn bởi sử dụng MySQL Client bởi lệnh mysql. Tại thời điểm này, bạn không cần cung cấp mật khẩu, khi theo mặc định, nó được thiết lập là trống.</p>\n<p>Vì thế, bạn chỉ sử dụng lệnh sau:</p>\n<pre class=\"prettyprint notranslate\">\n[root@host]# mysql\n</pre>\n<p>Nó nên được phản hồi với một dòng nhắc mysql&gt;. Bây giờ, bạn đã kết nối tới MySQL Server và bạn có thể thực thi tất cả lệnh SQL tại dòng nhắc mysql&gt; như sau:</p>\n<pre class=\"prettyprint notranslate\">\nmysql&gt; SHOW DATABASES;\n+----------+\n| Database |\n+----------+\n| mysql    |\n| test     |\n+----------+\n2 rows in set (0.13 sec)\n</pre>\n<h2>Các bước bố trí cài đặt MySQL</h2>\n<p>MySQL cung cấp một mật khẩu trống cho root user. Ngay khi bạn đã cài đặt thành công Database và Client, bạn cần thiết lập root password như sau:</p>\n<pre class=\"prettyprint notranslate\">\n[root@host]# mysqladmin -u root password \"new_password\";\n</pre>\n<p>Bây giờ, kết nối với MySQL Server, bạn sẽ phải sử dụng lệnh sau:</p>\n<pre class=\"prettyprint notranslate\">\n[root@host]# mysql -u root -p\nEnter password:*******\n</pre>\n<p>Người dùng UNIX cũng sẽ muốn đặt thư mục MySQL trong PATH, vì thế bạn không phải thử gõ cả full path mỗi khi bạn muốn sử dụng command-line client. Với Bash, nó sẽ là như sau:</p>\n<pre class=\"prettyprint notranslate\">\nexport PATH=$PATH:/usr/bin:/usr/sbin\n</pre>\n<h2>Chạy MySQL tại Boot time</h2>\n<p>Nếu bạn muốn chạy MySQL Server tại Boot time, thì đảm bảo rằng bạn có entry sau trong /etc/rc.local file.</p>\n<pre class=\"prettyprint notranslate\">\n/etc/init.d/mysqld start\n</pre>\n<p>Ngoài ra, bạn nên có mysqld binary trong thư mục /etc/init.d/.</p>',2),(4,'Quản Lý MySql','<h1>Quản lý MySQL</h1><h2>Chạy và tắt MySQL Server</h2>\r\n<p>Đầu tiên, để kiểm tra xem MySQL Server là đang chạy hay không, bạn có thể sử dụng lệnh sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n ps -ef | grep mysqld\r\n</pre>\r\n<p>Nếu MySQL đang chạy, thì bạn sẽ thấy tiến trình mysqld được liệt kê trong kết quả. Nếu Server không chạy, thì bạn có thể khởi động nó bởi sử dụng lệnh sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nroot@host# cd /usr/bin\r\n./safe_mysqld &amp;\r\n</pre>\r\n<p>Bây giờ, nếu bạn muốn tắt một MySQL Server đang chạy, bạn sử dụng lệnh sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nroot@host# cd /usr/bin\r\n./mysqladmin -u root -p shutdown\r\nEnter password: ******\r\n</pre><h2>Thiết lập một MySQL User Account</h2>\r\n<p>Để thêm một người dùng mới cho MySQL, bạn chỉ cần thêm một entry mới cho bảng <b>user</b> trong Database <b>mysql</b>. </p>\r\n<p>Ví dụ dưới đây sẽ thêm một người dùng mới guest với quyền SELECT, INSERT, và UPDATE với mật khẩu guest123, truy vấn SQL là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nroot@host# mysql -u root -p\r\nEnter password:*******\r\nmysql&gt; use mysql;\r\nDatabase changed\r\n\r\nmysql&gt; INSERT INTO user \r\n          (host, user, password, \r\n           select_priv, insert_priv, update_priv) \r\n           VALUES (\'localhost\', \'guest\', \r\n           PASSWORD(\'guest123\'), \'Y\', \'Y\', \'Y\');\r\nQuery OK, 1 row affected (0.20 sec)\r\n\r\nmysql&gt; FLUSH PRIVILEGES;\r\nQuery OK, 1 row affected (0.01 sec)\r\n\r\nmysql&gt; SELECT host, user, password FROM user WHERE user = \'guest\';\r\n+-----------+---------+------------------+\r\n| host      | user    | password         |\r\n+-----------+---------+------------------+\r\n| localhost | guest | 6f8c114b58f2ce9e |\r\n+-----------+---------+------------------+\r\n1 row in set (0.00 sec)\r\n</pre>\r\n<p>Khi thêm một người dùng mới, bạn nhớ mật mã hóa mật khẩu mới bởi sử dụng hàm <b>PASSWORD()</b> được cung cấp bởi MySQL. Như bạn có thể thấy trong ví dụ trên, mật khẩu mypass được mật mã hóa là:</p>\r\n<p>Chú ý lệnh FLUSH PRIVILEGES. Lệnh này nói cho Server để nạp lại các bảng. Nếu bạn không sử dụng lệnh này, thì bạn sẽ không thể kết nối tới mysql với tài khoản mới này, ít nhất tới khi Server được reboot.</p>\r\n<p>Bạn cũng có thể xác định privileges khác cho một người dùng mới bằng việc thiết lập các giá trị của cột sau trong bảng user cho \'Y\' khi thực thị truy vấn INSERT hoặc bạn có thể cập nhật chúng sau khi sử dụng truy vấn UPDATE.</p>\r\n<ul class=\"list\">\r\n<li><p> Select_priv </p></li>\r\n<li><p> Insert_priv </p></li>\r\n<li><p> Update_priv </p></li>\r\n<li><p> Delete_priv </p></li>\r\n<li><p> Create_priv </p></li>\r\n<li><p> Drop_priv </p></li>\r\n<li><p> Reload_priv </p></li>\r\n<li><p> Shutdown_priv </p></li>\r\n<li><p> Process_priv </p></li>\r\n<li><p> File_priv </p></li>\r\n<li><p> Grant_priv </p></li>\r\n<li><p> References_priv </p></li>\r\n<li><p> Index_priv </p></li>\r\n<li><p> Alter_priv </p></li>\r\n</ul>\r\n<p>Một cách khác để thêm user account là bằng cách sử dụng lệnh GRANT SQL. Ví dụ sau sẽ thêm người dùng zara với mật khẩu zara123 cho một cơ sở dữ liệu cụ thể là TUTORIALS.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nroot@host# mysql -u root -p password;\r\nEnter password:*******\r\nmysql&gt; use mysql;\r\nDatabase changed\r\n\r\nmysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP\r\n    -&gt; ON TUTORIALS.*\r\n    -&gt; TO \'zara\'@\'localhost\'\r\n    -&gt; IDENTIFIED BY \'zara123\';\r\n</pre>\r\n<p>Ví dụ này cũng sẽ tạo một entry trong bảng dữ liệu gọi là <b>user</b>.</p>\r\n<p><b>GHI CHÚ: </b>MySQL không kết thúc một lệnh tới khi bạn cung cấp một dấu chấm phảy (;) tại phần cuối của lệnh SQL. </p>\r\n<h2>Cấu hình /etc/my.cnf File</h2>\r\n<p>Trong hầu hết các tình huống, bạn không nên động đến file này. Theo mặc định, nó sẽ có các entry sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n[mysqld]\r\ndatadir=/var/lib/mysql\r\nsocket=/var/lib/mysql/mysql.sock\r\n\r\n[mysql.server]\r\nuser=mysql\r\nbasedir=/var/lib\r\n\r\n[safe_mysqld]\r\nerr-log=/var/log/mysqld.log\r\npid-file=/var/run/mysqld/mysqld.pid\r\n</pre>\r\n<p>Ở đây, bạn có thể xác định một thư mục khác cho error log, nếu không, bạn không nên thay đổi bất cứ entry nào trong bảng này.</p>\r\n<h2>Các lệnh MySQL thường sử dụng</h2>\r\n<p>Dưới đây là danh sách các lệnh MySQL quan trọng mà bạn sẽ thường xuyên sử dụng trong khi làm việc với MySQL Database:</p>\r\n<ul class=\"list\">\r\n<li><p><b>USE <i>Databasename</i></b>: Lệnh này được sử dụng để chọn một cơ sở dữ liệu cụ thể trong khu vực làm việc.</p></li>\r\n<li><p><b>SHOW DATABASES:</b> Lệnh này liệt kê các Database mà là có thể truy cập bởi MySQL DBMS.</p></li>\r\n<li><p><b>SHOW TABLES:</b> Hiển thị các bảng trong cơ sở dữ liệu một khi một cơ sở dữ liệu đã được lựa chọn với lệnh USE.</p></li>\r\n<li><p><b>SHOW COLUMNS FROM <i>tablename:</i></b> Hiển thị các thuộc tính, kiểu của thuộc tính, thông tin key, có hay không cho phép NULL, các mặc định, và thông tin khác cho một bảng.</p></li>\r\n<li><p><b>SHOW INDEX FROM <i>tablename</i>:</b> Hiển thị chi tiết tất cả chỉ mục trên bảng, bao gồm PRIMARY KEY.</p></li>\r\n<li><p><b>SHOW TABLE STATUS LIKE <i>tablename</i>\\G:</b> Báo cáo chi tiết hiệu suất và thống kê MySQL DBMS.</p></li>\r\n</ul>',2),(5,'Cú pháp MySQL-PHP','<p>MySQL làm việc tốt khi kết hợp với nhiều ngôn ngữ lập trình đa dạng như PERL, C, C++, Java, và PHP. Trong đó, PHP được sử dụng phổ biến nhất bởi vì khả năng phát triển ứng dụng Web của nó. Loạt bài này trọng tâm sử dụng MySQL trong một môi trường PHP.</p>\r\n<p>PHP cung cấp các hàm đa dạng để truy cập MySQL Database và để thao tác các bản ghi dữ liệu bên trong MySQL Database. Bạn sẽ cần gọi các hàm theo đúng như cách bạn gọi bất kỳ hàm PHP khác.</p>\r\n<p>Các hàm PHP để sử dụng với MySQL có dạng tổng quát như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql_<i>Hàm</i>(giatri,giatri,...);\r\n</pre>\r\n<p>Phần thứ hai (<i>Hàm</i>) là cụ thể cho từng hàm, thường là một từ miêu tả những gì hàm đó thực hiện. Dưới đây là hai hàm sẽ được sử dụng trong loạt bài này.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql_connect($connect);\r\nmysql_query($connect,\"Lệnh SQL\");\r\n</pre><p>Ví dụ sau minh họa cú pháp chung của PHP để gọi bất kỳ hàm MySQL nào.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n<html>\r\n<head>\r\n<title>Cu phap chung cua PHP va MySQL</title>\r\n</head>\r\n<body>\r\n<?php\r\n   $retval = mysql_<i>Hàm</i>(giatri, giatri,...);\r\n   if( !$retval )\r\n   {\r\n       die ( \"Thong bao ve loi co lien quan\" );\r\n   }\r\n   // Lenh MySQL hoac PHP khac\r\n?>\r\n</body>\r\n</html>\r\n</pre>\r\n<p>Bắt đầu từ chương sau, chúng tôi sẽ trình bày các tính năng MySQL quan trọng đi cùng với PHP.</p>\r\n',2),(6,'Kết nối MySQL','<h2>Kết nối MySQL sử dụng mysql binary</h2>\r\n<p>Bạn có thể thành lập MySQL Database bởi sử dụng mysql binary tại Command prompt.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Dưới đây là một ví dụ đơn giản để kết nối MySQL Server từ dòng nhắc lệnh:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n[root@host]# mysql -u root -p\r\nEnter password:******\r\n</pre>\r\n<p>Nó sẽ cung cấp cho bạn dòng nhắc lệnh mysql>, tại đây bạn sẽ có thể thực thi bất kỳ lệnh SQL nào. Dưới đây là kết quả của lệnh trên.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\r\nYour MySQL connection id is 2854760 to server version: 5.0.9\r\n\r\nType \'help;\' or \'\\h\' for help. Type \'\\c\' to clear the buffer.\r\n</pre>\r\n<p>Trong ví dụ trên, chúng ta đã sử dụng root như là một user, nhưng bạn có thể sử dụng bất kỳ user nào. Bất kỳ user nào sẽ có thể thực hiện tất cả hoạt động SQL, mà đã được trao quyền cho user đó.</p>\r\n<p>Bạn có thể ngắt kết nối từ MySQL Database bất cứ lúc nào bởi sử dụng lệnh exit tại dòng nhắc mysql>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql> exit\r\nBye\r\n</pre><h2>Kết nối MySQL sử dụng PHP Script</h2>\r\n<p>PHP cung cấp hàm mysql_connect() để mở một kết nối tới cơ sở dữ liệu. Hàm này nhận 5 tham số và trả về một định danh liên kết tới MySQL nếu thành công hoặc FALSE nếu thất bại.</p>\r\n<h2>Cú pháp</h2>\r\n<pre class=\"prettyprint notranslate\">\r\nconnection mysql_connect(server,user,passwd,new_link,client_flag);\r\n</pre>\r\n<table class=\"table table-bordered\"> \r\n<tr>\r\n<th align=\"left\" valign=\"top\" style=\"width:20%\">Tham số</th>\r\n<th align=\"left\" valign=\"top\" style=\"width:80%\">Miêu tả</th>\r\n</tr>  \r\n<tr><td>server</td><td>Tùy ý - Host name đang chạy Database Server. Nếu không được xác định thì giá trị mặc định là localhost:3036 <b>localhost:3036</b>.</td></tr>\r\n<tr><td>user</td><td>Tùy ý - Username truy vập cơ sở dữ liệu đó. Nếu không được xác định, thì mặc định là tên người dùng mà sở hữu tiến trình Server đó</td></tr>\r\n<tr><td>passwd</td><td>Tùy ý - Password của người dùng truy cập cơ sở dữ liệu đó. Nếu không được xác định, thì mặc định là một mật khẩu trống</td></tr>\r\n<tr><td>new_link</td><td>Tùy ý – Nếu một lời gọi thứ hai tới hàm mysql_connect() với cùng các tham số, thì không có kết nối mới được thành lập; thay vào đó, định danh của kết nối đã được mở sẽ được trả về</td></tr>\r\n<tr><td>client_flags</td><td>Tùy ý – Một tổ hợp của các hằng sau:<br />\r\n<ul class=\"list\">\r\n<li><p>MYSQL_CLIENT_SSL - Sử dụng mật mã hóa SSL</p></li>\r\n<li><p>MYSQL_CLIENT_COMPRESS - Sử dụng compression protocol</p></li>\r\n<li><p>MYSQL_CLIENT_IGNORE_SPACE - Cho phép khoảng trống sau các tên hàm</p></li>\r\n<li><p>MYSQL_CLIENT_INTERACTIVE - Cho phép timeout tương tác (bằng giây) trước khi đóng kết nối/p></li>\r\n</ul>\r\n</td></tr>\r\n</table>\r\n<p>Bạn có thể ngắt kết nối với MySQL Database bất cứ lúc nào bởi sử dụng hàm PHP khác là <b>mysql_close()</b>. Hàm này chỉ nhận một tham số đơn, mà là một kết nối được trả về bởi hàm <b>mysql_connect()</b>.</p>\r\n<h2>Cú pháp</h2>\r\n<pre class=\"prettyprint notranslate\">\r\nbool mysql_close ( resource $link_identifier );\r\n</pre>\r\n<p>Nếu một resource không được xác định, thì cơ sở dữ liệu được mở lần cuối cùng sẽ bị đóng. Hàm này trả về true nếu nó đóng kết nối thành công, nếu không thì trả về false.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau minh họa cách kết nối tới một MySQL Server.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n<html>\r\n<head>\r\n<title>Ket noi MySQL Server</title>\r\n</head>\r\n<body>\r\n<?php\r\n   $dbhost = \'localhost:3306\';\r\n   $dbuser = \'root\';\r\n   $dbpass = \'123456\';\r\n   $conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\n   if(! $conn )\r\n   {\r\n     die(\'Khong the ket noi: \' . mysql_error());\r\n   }\r\n   echo \'Ket noi thanh cong\';\r\n   mysql_close($conn);\r\n?>\r\n</body>\r\n</html>\r\n</pre>\r\n<p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>ketnoi.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/ketnoi.php</i> sẽ cho kết quả như sau: </p>\r\n<pre class=\"prettyprint notranslate\">\r\nKet noi thanh cong\r\n</pre>',2),(7,'Tạo Database','<h2>Tạo cơ sở dữ liệu trong MySQL</h2>\r\n<p>Để tạo cơ sở dữ liệu, bạn sử dụng lệnh <b>CREATE</b> trong MySQL. Dưới đây là cú pháp của lệnh CREATE: </p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE DATABASE Ten_co_so_du_lieu;\r\n</pre>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ đơn giản sau sẽ tạo cơ sở dữ liệu là <i>sinhvien</i>:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE DATABASE sinhvien;\r\n</pre>\r\n<p>Lệnh này sẽ tạo một cơ sở dữ liệu có tên là sinhvien trong MySQL Database. </p>\r\n<h2>Tạo Database bởi sử dụng PHP Script</h2>\r\n<p>PHP sử dụng hàm <b>mysql_query</b> để tạo hoặc xóa một MySQL Database. Hàm này nhận hai tham số và trả về TRUE nếu thành công hoặc FALSE nếu thất bại.</p><h2>Cú pháp</h2>\r\n<pre class=\"prettyprint notranslate\">\r\nbool mysql_query( sql, connection );\r\n</pre>\r\n<p>Chi tiết về tham số:</p>\r\n<ul class=\"list\">\r\n<li><p><b>sql</b>: Đây là tham số bắt buộc, là truy vấn SQL để tạo hoặc xóa một MySQL database.</p></li>\r\n<li><p><b>connection</b>: Đây là tham số tùy ý. Nếu không được xác định, thì kết nối cuối đã được mở bởi hàm <i>mysql_connect</i> sẽ được sử dụng.</p></li>\r\n</ul>\r\n<h2>Ví dụ tạo cơ sở dữ liệu bởi sử dụng PHP script</h2>\r\n<p>Để tạo cơ sở dữ liệu có tên là <i>sinhvien</i>, PHP script sẽ là như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Tao MySQL Database&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\necho \'Ket noi thanh cong&lt;br /&gt;\';\r\n$sql = \'CREATE DATABASE sinhvien\';\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the tao co so du lieu: \' . mysql_error());\r\n}\r\necho \"Co so du lieu sinhvien duoc tao thanh cong\\n\";\r\nmysql_close($conn);\r\n?&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n<p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>taodb.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/taodb.php</i> sẽ cho kết quả như sau: </p>\r\n<pre class=\"prettyprint notranslate\">\r\nKet noi thanh cong\r\nCo so du lieu sinhvien duoc tao thanh cong\r\n</pre>',2),(8,'Xóa Database','<h2>Xóa cơ sở dữ liệu trong MySQL</h2>\r\n<p>Để xóa bất kỳ cơ sở dữ liệu nào mà bạn thấy không cần thiết, bạn sử dụng lệnh <b>DROP DATABASE</b> trong MySQL. Cẩn thận trong khi xóa bất kỳ cơ sở dữ liệu nào bởi vì bạn sẽ mất toàn bộ dữ liệu có trong cơ sở dữ liệu đó (Có lẽ hoạt động xóa này chỉ có trong quá trình thực hành của bạn, khi làm việc thực tế thì việc này rất ít xảy ra).</p>\r\n<p>Cú pháp của lệnh DROP DATABASE trong MySQL là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nDROP DATABASE ten_co_so_du_lieu;\r\n</pre>\r\n<p>Dưới đây là ví dụ để xóa một cơ sở dữ liệu đã được tạo trong chương trước là <i>sinhvien</i>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nDROP DATABASE sinhvien;\r\n</pre>\r\n\r\n<h2>Xóa cơ sở dữ liệu bởi sử dụng PHP Script</h2>\r\n<p>PHP sử dụng hàm <b>mysql_query</b> để tạo hoặc xóa một MySQL Database. Hàm này nhận hai tham số và trả về TRUE nếu thành công hoặc FALSE nếu thất bại.</p><h2>Cú pháp</h2>\r\n<pre class=\"prettyprint notranslate\">\r\nbool mysql_query( sql, connection );\r\n</pre>\r\n<p>Chi tiết về tham số:</p>\r\n<ul class=\"list\">\r\n<li><p><b>sql</b>: Đây là tham số bắt buộc, là truy vấn SQL để tạo hoặc xóa một MySQL database.</p></li>\r\n<li><p><b>connection</b>: Đây là tham số tùy ý. Nếu không được xác định, thì kết nối cuối đã được mở bởi hàm <i>mysql_connect</i> sẽ được sử dụng.</p></li>\r\n</ul>\r\n<h2>Ví dụ</h2>\r\n<p>Để xóa cơ sở dữ liệu có tên là <i>sinhvien</i>, PHP script sẽ là như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Xoa co so du lieu&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\necho \'Ket noi thanh cong&lt;br /&gt;\';\r\n$sql = \'DROP DATABASE sinhvien\';\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the xoa co so du lieu: \' . mysql_error());\r\n}\r\necho \"Co so du lieu sinhvien duoc xoa thanh cong\\n\";\r\nmysql_close($conn);\r\n?&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre><p><b>CẢNH BÁO:</b> Trong khi xóa một cơ sở dữ liệu bởi sử dụng PHP Script, nó không nhắc bạn để xác nhận bất kỳ điều gì. Vì thế, bạn thật cẩn thận trong khi xóa một cơ sở dữ liệu MySQL.</p>\r\n<p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>xoadb.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/xoadb.php</i> sẽ cho kết quả như sau: </p>\r\n<pre class=\"prettyprint notranslate\">\r\nKet noi thanh cong\r\nCo so du lieu sinhvien duoc xoa thanh cong\r\n</pre>',2),(9,'Chọn cơ sở dữ liệu','<h1>Chọn cơ sở dữ liệu trong MySQL</h1>\r\n<p>Khi bạn kết nối với MySQL Server, để làm việc với một cơ sở dữ liệu nào đó, bạn cần lựa chọn một cơ sở dữ liệu. Điều này là bởi vì có nhiều cơ sở dữ liệu có sẵn MySQL Server.</p>\r\n<h2>Chọn cơ sở dữ liệu trong MySQL</h2>\r\n<p>Chọn một cơ sở dữ liệu cụ thể trong MySQL là rất đơn giản. Bạn có thể sử dụng lệnh <b>use</b> trong SQL để lựa chọn một cơ sở dữ liệu. Cú pháp của lệnh use là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nUSE ten_co_so_du_lieu;\r\n</pre>\r\n<p>Ví dụ sau lựa chọn một cơ sở dữ liệu có tên <b>sinhvien</b>:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nUSE sinhvien;\r\n</pre>\r\n<p>Bây giờ, bạn đã lựa chọn cơ sở dữ liệu sinhvien và tất cả hoạt động sau đó sẽ được thực hiện trên cơ sở dữ liệu này.</p>\r\n<p><b>GHI CHÚ:</b> Tất cả tên cơ sở dữ liệu, tên bảng, tên các trường của bảng là phân biệt kiểu chữ. Vì thế, bạn phải sử dụng tên chính xác trong khi cung cấp cho bất kỳ lệnh SQL nào.</p>\r\n<h2>Chọn MySQL Database bởi sử dụng PHP Script</h2>\r\n<p>PHP cung cấp hàm <b>mysql_select_db</b> để chọn một cơ sở dữ liệu. Hàm này trả về TRUE nếu thành công hoặc FALSE nếu thất bại.</p><h2>Cú pháp</h2>\r\n<pre class=\"prettyprint notranslate\">\r\nbool mysql_select_db( ten_co_so_du_lieu, connection );\r\n</pre>\r\n<p>Chi tiết về tham số:</p>\r\n<ul class=\"list\">\r\n<li><p><b>ten_co_so_du_lieu</b>: Đây là tham số bắt buộc, là tên cơ sở dữ liệu.</p></li>\r\n<li><p><b>connection</b>: Đây là tham số tùy ý. Nếu không được xác định, thì kết nối cuối đã được mở bởi hàm <i>mysql_connect</i> sẽ được sử dụng.</p></li>\r\n</ul><h2>Ví dụ</h2>\r\n<p>Để chọn một cơ sở dữ liệu có tên là <i>sinhvien</i>, PHP script sẽ là như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Chon co so du lieu&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;?php\r\n$dbhost = \'localhost:3036\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\necho \'Ket noi thanh cong\';\r\nmysql_select_db( \'sinhvien\' );\r\nmysql_close($conn);\r\n?&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>',2),(10,'Kiểu Dữ Liệu','<h1>Kiểu dữ liệu trong MySQL</h1>\r\n<p>Việc định nghĩa một cách hợp lý các trường trong một bảng là quan trọng để tối ưu hóa toàn bộ cơ sở dữ liệu của bạn. Bạn chỉ nên sử dụng kiểu và kích cỡ của trường mà bạn thực sự muốn sử dụng; đừng định nghĩa một trường với độ rộng là 10 ký tự nếu bạn chỉ sử dụng 2 ký tự. Các kiểu của trường (hoặc cột) cũng được biết đến như là các <b>kiểu dữ liệu</b>, tức là kiểu dữ liệu bạn sẽ lưu trữ trong các trường đó.</p>\r\n<p>MySQL sử dụng nhiều kiểu dữ liệu, được chia thành 3 loại: kiểu số, kiểu date và time, và kiểu chuỗi.</p>\r\n<h2>Kiểu dữ liệu số trong MySQL</h2>\r\n<p>MySQL sử dụng tất cả các kiểu dữ liệu số theo chuẩn ANSI SQL, vì thế nếu bạn đã làm quen với một hệ thống cơ sở dữ liệu khác, thì bạn sẽ thấy những định nghĩa này là khá thân thuộc với bạn khi học về MySQL. Dưới đây liệt kê các kiểu dữ liệu số phổ biến và miêu tả của chúng:</p>\r\n<ul class=\"list\">\r\n<li><p><b>INT </b> - Một số nguyên với kích cỡ thông thường, có thể là signed hoặc unsigned. Nếu có dấu, thì dãy giá trị có thể là từ -2147483648 tới 2147483647, nếu không dấu thì dãy giá trị là từ 0 tới 4294967295. Bạn có thể xác định một độ rộng lên tới 11 chữ số.</p></li>\r\n<li><p><b>TINYINT </b> - Một số nguyên với kích cỡ rất nhỏ, có thể là signed hoặc unsigned. Nếu có dấu, thì dãy giá trị có thể là từ -128 tới 127, nếu không dấu thì dãy giá trị là từ 0 tới 255. Bạn có thể xác định một độ rộng lên tới 4 chữ số.</p></li>\r\n<li><p><b>SMALLINT </b> - Một số nguyên với kích cỡ nhỏ, có thể là signed hoặc unsigned. Nếu có dấu, thì dãy giá trị có thể là từ -32768 tới 32767, nếu không dấu thì dãy giá trị là từ 0 tới 65535. Bạn có thể xác định một độ rộng lên tới 5 chữ số.</p></li>\r\n<li><p><b>MEDIUMINT </b> - Một số nguyên với kích cỡ trung bình, có thể là signed hoặc unsigned. Nếu có dấu, thì dãy giá trị có thể là từ -8388608 tới 8388607, nếu không dấu thì dãy giá trị là từ 0 tới 16777215. Bạn có thể xác định một độ rộng lên tới 9 chữ số.</p></li>\r\n<li><p><b>BIGINT </b> - Một số nguyên với kích cỡ lớn, có thể là signed hoặc unsigned. Nếu có dấu, thì dãy giá trị có thể là từ -9223372036854775808 tới 9223372036854775807, nếu không dấu thì dãy giá trị là từ 0 tới 18446744073709551615. Bạn có thể xác định một độ rộng lên tới 20 chữ số.</p></li>\r\n<li><p><b>FLOAT(M,D) </b> - Một số thực dấu chấm động không dấu. Bạn có thể định nghĩa độ dài hiển thị (M) và số vị trí sau dấy phảy (D). Điều này là không bắt buộc và sẽ có mặc định là 10,2: với 2 là số vị trí sau dấu phảy và 10 là số chữ số (bao gồm các phần thập phân). Phần thập phân có thể lên tới 24 vị trí sau dấu phảy đối với một số FLOAT.</p></li>\r\n<li><p><b>DOUBLE(M,D) </b> - Một số thực dấu chấm động không dấu. Bạn có thể định nghĩa độ dài hiển thị (M) và số vị trí sau dấy phảy (D). Điều này là không bắt buộc và sẽ có mặc định là 16,4: với 4 là số vị trí sau dấu phảy và 16 là số chữ số (bao gồm các phần thập phân). Phần thập phân có thể lên tới 53 vị trí sau dấu phảy đối với một số DOUBLE. REAL là đồng nghĩa với DOUBLE.</p></li>\r\n<li><p><b>DECIMAL(M,D) </b> - Một kiểu khác của dấu chấm động không dấu. Mỗi chữ số thập phân chiếm 1 byte. Việc định nghĩa độ dài hiển thị (M) và số vị trí sau dấy phảy (D) là bắt buộc. NUMERIC là một từ đồng nghĩa cho DECIMAL.</p></li>\r\n</ul>\r\n<h2>Kiểu dữ liệu Date và Time trong MySQL</h2>\r\n<p>Kiểu dữ liệu Date và Time được phân loại thành:</p>\r\n<ul class=\"list\">\r\n<li><p><b>DATE </b> - Một date trong định dạng YYYY-MM-DD, giữa 1000-01-01 và 9999-12-31. Ví dụ, ngày 25 tháng 12 năm 2015 sẽ được lưu ở dạng 2015-12-25.</p></li>\r\n<li><p><b>DATETIME </b> - Một tổ hợp Date và Time trong định dạng YYYY-MM-DD HH:MM:SS, giữa 1000-01-01 00:00:00 và 9999-12-31 23:59:59. Ví dụ, 3:30 chiều ngày 25 tháng 12, năm 2015 sẽ được lưu ở dạng 2015-12-25 15:30:00.</p></li>\r\n<li><p><b>TIMESTAMP </b> - Một Timestamp từ giữa nửa đêm ngày 1/1/1970 và 2037. Trông khá giống với định dạng DATETIME trước, khác biệt ở chỗ không có dấu gạch nối giữa các số. Ví dụ, 3:30 chiều ngày 25 tháng 12, năm 2015 sẽ được lưu dưới dạng 20151225153000 ( YYYYMMDDHHMMSS ).</p></li>\r\n<li><p><b>TIME </b> - Lưu time trong định dạng HH:MM:SS.</p></li>\r\n<li><p><b>YEAR(M) </b> - Lưu 1 năm trong định dạng 2 chữ số hoặc 4 chữ số. Nếu độ dài được xác định là 2 (ví dụ: YEAR(2)), YEAR có thể từ 1970 tới 2069 (70 tới 69). Nếu độ dài được xác định là 4, YEAR có thể từ 1901 tới 2155. Độ dài mặc định là 4.</p></li>\r\n</ul><h2>Kiểu dữ liệu chuỗi trong MySQL</h2>\r\n<p>Ngoài các kiểu dữ liệu số hoặc kiểu dữ liệu date và time, thì còn một kiểu dữ liệu mà bạn thường sử dụng nhất trong MySQL là kiểu dữ liệu chuỗi. Dưới đây liệt kê các kiểu dữ liệu chuỗi và phần miêu tả của chúng trong MySQL:</p>\r\n<ul class=\"list\">\r\n<li><p><b>CHAR(M)</b> - Một chuỗi có độ dài cố định có độ dài từ 1 tới 255 ký tự (ví dụ CHAR(5)). Nếu giá trị thật của một trường kiểu Char không bằng với độ dài khai báo thì phần thiếu bên phải của nó sẽ được thêm bằng các kí tự trắng một cách tự động. Định nghĩa độ dài là không bắt buộc, giá trị mặc định là 1.</p></li>\r\n<li><p><b>VARCHAR(M) </b> - Dữ liệu kiểu chuỗi có độ dài thay đổi, có độ dài từ 1 đến 255 kí tự (ví dụ Varchar(24)). Bạn phải định nghĩa độ dài khi tạo một trường VARCHAR.</p></li>\r\n<li><p><b>BLOB hoặc TEXT </b> - Trường kiểu này có độ dài tối đa 65535 kí tự. BLOBs là viết tắt của \"Binary Large Objects\", và được sử dụng để lưu trữ một lượng lớn dữ liệu nhị phân như các bức ảnh hoặc các loại tập tin khác. Với TEXT, trường cũng lưu trữ được một lượng lớn dữ liệu. Điểm khác nhau giữa chúng là: khi sắp xếp và so sánh dữ liệu đã lưu trữ thì với BLOBs là phân biệt kiểu chữ, còn với TEXT là không phân biệt kiểu chữ. Bạn không phải xác định độ dài với BLOBs hoặc TEXT.</p></li>\r\n<li><p><b>TINYBLOB hoặc TINYTEXT </b> - Một cột BLOB hoặc TEXT với độ dài tối đa là 255 ký tự. Bạn không cần xác định độ dài với TINYBLOB hoặc TINYTEXT.</p></li>\r\n<li><p><b>MEDIUMBLOB hoặc MEDIUMTEXT </b> - Một cột BLOB hoặc TEXT với độ dài tối đa là 16777215 ký tự. Bạn không cần xác định độ dài với MEDIUMBLOB hoặc MEDIUMTEXT.</p></li>\r\n<li><p><b>LONGBLOB hoặc LONGTEXT </b> - Một cột BLOB hoặc TEXT với độ dài tối đa là 4294967295 ký tự. Bạn không cần xác định độ dài với LONGBLOB hoặc LONGTEXT.</p></li>\r\n<li><p><b>ENUM </b> - Khi định nghĩa một trường kiểu này, tức là, ta đã chỉ ra một danh sách các đối tượng mà trường phải nhận (có thể là Null). Ví dụ, nếu ta muốn một trường nào đó chỉ nhận một trong các giá trị \"A\" hoặc \"B\" hoặc \"C\" thì ta phải định nghĩa kiểu ENUM cho nó như sau: ENUM (\'A\', \'B\', \'C\'). Và chỉ có các giá trị này (hoặc NULL) có thể xuất hiện trong trường đó.</p></li>\r\n</ul>',2),(11,'Tạo bảng','<h1>Tạo bảng trong MySQL</h1><p>Lệnh để tạo một bảng dữ liệu trong MySQL cần bao gồm:</p>\r\n<ul class=\"list\">\r\n<li><p>Tên bảng</p></li>\r\n<li><p>Tên các trường</p></li>\r\n<li><p>Định nghĩa cho mỗi trường</p></li>\r\n</ul>\r\n<h2>Cú pháp</h2>\r\n<p>Dưới đây là cú pháp SQL cơ bản để tạo một bảng trong MySQL:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE TABLE ten_bang (ten_cot kieu_du_lieu_cucot);\r\n</pre><p>Dưới đây là ví dụ để tạo một bảng có tên là <b>sinhvienk60</b> với các trường <b>mssv, ho, ten, tuoi, diemthick</b> trong cơ sở dữ liệu <b>sinhvien</b>:</p>\r\n<p><b>Ghi chú</b>: Nếu bạn có nhiều cơ sở dữ liệu, thì để tạo bảng sinhvienk60 có trong cơ sở dữ liệu sinhvien thì trước hết bạn phải chọn cơ sở dữ liệu đó với lệnh <b>USE</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE TABLE sinhvienk60 (\r\nmssv INT NOT NULL AUTO_INCREMENT,\r\nho VARCHAR(255) NOT NULL,\r\nten VARCHAR(255) NOT NULL,\r\ntuoi INT NOT NULL,\r\ndiemthi FLOAT(4,2) NOT NULL,\r\nPRIMARY KEY (mssv)\r\n);\r\n</pre>\r\n<p>Một số khái niệm cần giải thích:</p>\r\n<ul class=\"list\">\r\n<li><p>Thuộc tính <b>NOT NULL</b> của trường đang được sử dụng bởi vì chúng ta không muốn trường này là NULL. Vì thế, nếu người dùng cố gắng tạo một bản ghi có giá trị NULL, thì MySQL sẽ tạo một lỗi.</p></li>\r\n<li><p>Thuộc tính <b>AUTO_INCREMENT</b> nói cho MySQL tự động tăng khóa chính và thêm giá trị có sẵn tiếp theo tới trường id.</p></li>\r\n<li><p>Từ khóa <b>PRIMARY KEY</b> được sử dụng để định nghĩa một cột là PRIMARY KEY (khóa chính). Bạn có thể sử dụng nhiều cột phân biệt nhau bởi dấu phảy để định nghĩa một PRIMARY KEY.</p></li>\r\n</ul>\r\n\r\n<h2>Tạo bảng bởi sử dụng PHP Script</h2>\r\n<p>Để tạo một bảng mới trong bất kỳ cơ sở dữ liệu đang tồn tại nào, bạn sẽ cần sử dụng hàm <b>mysql_query()</b> trong PHP. Bạn sẽ truyền cho hàm này tham số thứ hai là một lệnh SQL hợp lý để tạo một bảng.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau minh họa cách tạo một bảng <b>sinhvienk60</b> bởi sử dụng PHP Script:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Tao bang trong MySQL&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\necho \'Ket noi thanh cong&lt;br /&gt;\';\r\n$sql = \"CREATE TABLE sinhvienk60( \".\r\n       \"mssv INT NOT NULL AUTO_INCREMENT, \".\r\n       \"ho VARCHAR(255) NOT NULL, \".\r\n       \"ten VARCHAR(255) NOT NULL, \".\r\n       \"tuoi INT NOT NULL, \".\r\n       \"diemthi FLOAT(4,2) NOT NULL, \".\r\n       \"PRIMARY KEY ( mssv )); \";\r\nmysql_select_db( \'sinhvien\' );\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the tao bang: \' . mysql_error());\r\n}\r\necho \"Tao bang sinhvienk60 thanh cong\\n\";\r\nmysql_close($conn);\r\n?&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n<p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>taobang.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/taobang.php</i> sẽ cho kết quả như sau: </p>\r\n<pre class=\"prettyprint notranslate\">\r\nKet noi thanh cong\r\nTao bang sinhvienk60 thanh cong\r\n</pre>\r\n',2),(12,'Xóa bảng','<h1>Xóa bảng trong MySQL</h1><p>Để xóa một bảng trong MySQL đang tồn tại là khá đơn giản, nhưng bạn cần thật cẩn thận trong khi xóa bất kỳ bảng nào, bởi vì bạn sẽ mất toàn bộ dữ liệu đã được lưu giữ trong bảng đó và không thể phục hồi lại được.</p>\r\n<h2>Cú pháp</h2>\r\n<p>Cú pháp SQL chung để xóa một bảng MySQL là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nDROP TABLE ten_bang;\r\n</pre><h2>Ví dụ</h2>\r\n<p>Để xóa bảng <b>sinhvienk60</b> đã tạo ở chương trước, bạn sử dụng:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nDROP TABLE sinhvienk60;\r\n</pre>\r\n<h2>Xóa bảng bởi sử dụng PHP Script</h2>\r\n<p>Để xóa một bảng đang tồn tại trong bất kỳ cơ sở dữ liệu nào, bạn sẽ cần sử dụng hàm <b>mysql_query()</b> trong PHP. Bạn truyền cho tham số thứ hai một lệnh SQL hợp lý để xóa một bảng.</p>\r\n<h2>Ví dụ</h2>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Xoa bang trong MySQL&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\necho \'Ket noi thanh cong&lt;br /&gt;\';\r\n$sql = \"DROP TABLE sinhvienk60\";\r\nmysql_select_db( \'sinhvien\' );\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the xoa bang: \' . mysql_error());\r\n}\r\necho \"Bang sinhvienk60 da duoc xoa thanh cong\\n\";\r\nmysql_close($conn);\r\n?&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n<p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>xoabang.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/xoabang.php</i> sẽ cho kết quả như sau: </p>\r\n<pre class=\"prettyprint notranslate\">\r\nKet noi thanh cong\r\nBang sinhvienk60 da duoc xoa thanh cong\r\n</pre>',2),(13,'Truy vấn Insert','<h1>Truy vấn INSERT trong MySQL</h1><p>Để chèn dữ liệu vào trong bảng MySQL, bạn sẽ cần sử dụng lệnh SQL là <b>INSERT INTO</b>.</p><p>Cú pháp SQL cơ bản của lệnh INSERT INTO để chèn dữ liệu vào trong bảng MySQL là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nINSERT INTO ten_bang ( truong1, truong2,...truongN )\r\n                       VALUES\r\n                       ( giatri1, giatri2,...giatriN );\r\n</pre>\r\n<p>Để chèn kiểu dữ liệu chuỗi, điều bắt buộc là bạn phải giữ tất cả giá trị trong các trích dẫn đơn hoặc trích dẫn kép, ví dụ: <b>\"giatri\"</b>.</p>\r\n<h2>Ví dụ chèn dữ liệu vào bảng trong MySQL</h2>\r\n<p>Dưới đây là ví dụ minh họa việc sử dụng lệnh INSERT INTO để chèn dữ liệu vào trong bảng. Trong các chương trước, chúng ta đã tạo bảng <b>sinhvienk60</b>, bây giờ chúng ta chèn các bản ghi như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Dinh Van\", \"Cao\", 8);\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Nguyen Van\", \"Thanh\", 9);\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Nguyen Hoang\", \"Manh\", 7.5);\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Tran Van\", \"Nam\", 10);\r\n\r\n</pre><p>Trong ví dụ trên, mình đã không cung cấp <b>mssv</b> bởi vì tại thời điểm tạo bảng này, mình đã cung cấp tùy chọn AUTO_INCREMENT cho trường này. Vì thế, MySQL sẽ xử lý việc chèn các mssv của nó một cách tự động.</p>\r\n<p>Bây giờ, nếu bạn sử dụng lệnh SELECT (sẽ được học ở chương tiếp theo) với bảng trên như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk60;\r\n</pre><h2>Chèn dữ liệu vào bảng bởi sử dụng PHP Script</h2>\r\n<p>Bạn có thể sử dụng cùng lệnh INSERT INTO trong SQL này trong hàm <b>mysql_query()</b> trong PHP để chèn dữ liệu vào bảng MySQL.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ này sẽ nhận 4 tham số từ người dùng và sau đó sẽ chèn chúng vào trong bảng MySQL.</p><pre class=\"prettyprint notranslate prettyprinted\" style=\"\"><span class=\"tag\">&lt;html&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;head&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;title&gt;</span><span class=\"pln\">Chen du lieu vao bang trong MySQL</span><span class=\"tag\">&lt;/title&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/head&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;body&gt;</span><span class=\"pln\">\r\n</span><span class=\"pun\">&lt;?</span><span class=\"pln\">php\r\n</span><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">isset</span><span class=\"pun\">(</span><span class=\"pln\">$_POST</span><span class=\"pun\">[</span><span class=\"str\">\'add\'</span><span class=\"pun\">]))</span><span class=\"pln\">\r\n</span><span class=\"pun\">{</span><span class=\"pln\">\r\n$dbhost </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\'localhost:3306\'</span><span class=\"pun\">;</span><span class=\"pln\">\r\n$dbuser </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\'root\'</span><span class=\"pun\">;</span><span class=\"pln\">\r\n$dbpass </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\'123456\'</span><span class=\"pun\">;</span><span class=\"pln\">\r\n$conn </span><span class=\"pun\">=</span><span class=\"pln\"> mysql_connect</span><span class=\"pun\">(</span><span class=\"pln\">$dbhost</span><span class=\"pun\">,</span><span class=\"pln\"> $dbuser</span><span class=\"pun\">,</span><span class=\"pln\"> $dbpass</span><span class=\"pun\">);</span><span class=\"pln\">\r\n</span><span class=\"kwd\">if</span><span class=\"pun\">(!</span><span class=\"pln\"> $conn </span><span class=\"pun\">)</span><span class=\"pln\">\r\n</span><span class=\"pun\">{</span><span class=\"pln\">\r\n  </span><span class=\"kwd\">die</span><span class=\"pun\">(</span><span class=\"str\">\'Khong the ket noi: \'</span><span class=\"pln\"> </span><span class=\"pun\">.</span><span class=\"pln\"> mysql_error</span><span class=\"pun\">());</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span><span class=\"pln\">\r\n\r\n</span><span class=\"kwd\">if</span><span class=\"pun\">(!</span><span class=\"pln\"> get_magic_quotes_gpc</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"pln\">\r\n</span><span class=\"pun\">{</span><span class=\"pln\">\r\n   $ho </span><span class=\"pun\">=</span><span class=\"pln\"> addslashes </span><span class=\"pun\">(</span><span class=\"pln\">$_POST</span><span class=\"pun\">[</span><span class=\"str\">\'ho\'</span><span class=\"pun\">]);</span><span class=\"pln\">\r\n   $ten </span><span class=\"pun\">=</span><span class=\"pln\"> addslashes </span><span class=\"pun\">(</span><span class=\"pln\">$_POST</span><span class=\"pun\">[</span><span class=\"str\">\'ten\'</span><span class=\"pun\">]);</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span><span class=\"pln\">\r\n</span><span class=\"kwd\">else</span><span class=\"pln\">\r\n</span><span class=\"pun\">{</span><span class=\"pln\">\r\n   $ho </span><span class=\"pun\">=</span><span class=\"pln\"> $_POST</span><span class=\"pun\">[</span><span class=\"str\">\'ho\'</span><span class=\"pun\">];</span><span class=\"pln\">\r\n   $ten </span><span class=\"pun\">=</span><span class=\"pln\"> $_POST</span><span class=\"pun\">[</span><span class=\"str\">\'ten\'</span><span class=\"pun\">];</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span><span class=\"pln\">\r\n$diemthi </span><span class=\"pun\">=</span><span class=\"pln\"> $_POST</span><span class=\"pun\">[</span><span class=\"str\">\'diemthi\'</span><span class=\"pun\">];</span><span class=\"pln\">\r\n\r\n$sql </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\"INSERT INTO sinhvienk60 \"</span><span class=\"pun\">.</span><span class=\"pln\">\r\n       </span><span class=\"str\">\"(ho, ten, diemthi) \"</span><span class=\"pun\">.</span><span class=\"pln\">\r\n       </span><span class=\"str\">\"VALUES \"</span><span class=\"pun\">.</span><span class=\"pln\">\r\n       </span><span class=\"str\">\"(\'$ho\',\'$ten\',\'$diemthi\')\"</span><span class=\"pun\">;</span><span class=\"pln\">\r\nmysql_select_db</span><span class=\"pun\">(</span><span class=\"str\">\'sinhvien\'</span><span class=\"pun\">);</span><span class=\"pln\">\r\n$retval </span><span class=\"pun\">=</span><span class=\"pln\"> mysql_query</span><span class=\"pun\">(</span><span class=\"pln\"> $sql</span><span class=\"pun\">,</span><span class=\"pln\"> $conn </span><span class=\"pun\">);</span><span class=\"pln\">\r\n</span><span class=\"kwd\">if</span><span class=\"pun\">(!</span><span class=\"pln\"> $retval </span><span class=\"pun\">)</span><span class=\"pln\">\r\n</span><span class=\"pun\">{</span><span class=\"pln\">\r\n  </span><span class=\"kwd\">die</span><span class=\"pun\">(</span><span class=\"str\">\'Khong the nhap du lieu: \'</span><span class=\"pln\"> </span><span class=\"pun\">.</span><span class=\"pln\"> mysql_error</span><span class=\"pun\">());</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span><span class=\"pln\">\r\necho </span><span class=\"str\">\"Nhap du lieu thanh cong\\n\"</span><span class=\"pun\">;</span><span class=\"pln\">\r\nmysql_close</span><span class=\"pun\">(</span><span class=\"pln\">$conn</span><span class=\"pun\">);</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span><span class=\"pln\">\r\n</span><span class=\"kwd\">else</span><span class=\"pln\">\r\n</span><span class=\"pun\">{</span><span class=\"pln\">\r\n</span><span class=\"pun\">?&gt;</span><span class=\"pln\">\r\n&lt;form method=\"post\" action=\"</span><span class=\"pun\">&lt;?</span><span class=\"pln\">php $_PHP_SELF </span><span class=\"pun\">?&gt;</span><span class=\"pln\">\"&gt;\r\n</span><span class=\"tag\">&lt;table</span><span class=\"pln\"> </span><span class=\"atn\">width</span><span class=\"pun\">=</span><span class=\"atv\">\"600\"</span><span class=\"pln\"> </span><span class=\"atn\">border</span><span class=\"pun\">=</span><span class=\"atv\">\"0\"</span><span class=\"pln\"> </span><span class=\"atn\">cellspacing</span><span class=\"pun\">=</span><span class=\"atv\">\"1\"</span><span class=\"pln\"> </span><span class=\"atn\">cellpadding</span><span class=\"pun\">=</span><span class=\"atv\">\"2\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td</span><span class=\"pln\"> </span><span class=\"atn\">width</span><span class=\"pun\">=</span><span class=\"atv\">\"250\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">Ho</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;input</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"ho\"</span><span class=\"pln\"> </span><span class=\"atn\">type</span><span class=\"pun\">=</span><span class=\"atv\">\"text\"</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"ho\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td</span><span class=\"pln\"> </span><span class=\"atn\">width</span><span class=\"pun\">=</span><span class=\"atv\">\"250\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">Ten</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;input</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"ten\"</span><span class=\"pln\"> </span><span class=\"atn\">type</span><span class=\"pun\">=</span><span class=\"atv\">\"text\"</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"ten\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td</span><span class=\"pln\"> </span><span class=\"atn\">width</span><span class=\"pun\">=</span><span class=\"atv\">\"250\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">Diem Thi</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;input</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"diemthi\"</span><span class=\"pln\"> </span><span class=\"atn\">type</span><span class=\"pun\">=</span><span class=\"atv\">\"float\"</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"diemthi\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td</span><span class=\"pln\"> </span><span class=\"atn\">width</span><span class=\"pun\">=</span><span class=\"atv\">\"250\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">&nbsp;</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td&gt;</span><span class=\"pln\">&nbsp;</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td</span><span class=\"pln\"> </span><span class=\"atn\">width</span><span class=\"pun\">=</span><span class=\"atv\">\"250\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">&nbsp;</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;input</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"add\"</span><span class=\"pln\"> </span><span class=\"atn\">type</span><span class=\"pun\">=</span><span class=\"atv\">\"submit\"</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"add\"</span><span class=\"pln\"> </span><span class=\"atn\">values</span><span class=\"pun\">=</span><span class=\"atv\">\"Them ban ghi\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/td&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/tr&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/table&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/form&gt;</span><span class=\"pln\">\r\n</span><span class=\"pun\">&lt;?</span><span class=\"pln\">php\r\n</span><span class=\"pun\">}</span><span class=\"pln\">\r\n</span><span class=\"pun\">?&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/body&gt;</span><span class=\"pln\">\r\n</span><span class=\"tag\">&lt;/html&gt;</span></pre><p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>insert.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/insert.php</i><p>Trong khi thực hiện việc chèn dữ liệu, việc sử dụng hàm <b>get_magic_quotes_gpc()</b> để kiểm tra xem cấu hình hiện tại có được thiết lập cho magic quote hay không là một bước thực hành tốt. Nếu hàm này trả về false, thì sử dụng hàm <b>addslashes()</b> để thêm dấu gạch chéo trước các trích dẫn.</p>\r\n<p>Bạn có thể đặt nhiều điều kiện xác nhận để kiểm tra xem dữ liệu đã nhập vào là chính xác hay không và từ đó có thể thực hiện các hành động phù hợp.</p>',2),(14,'Truy vấn Select','<h1>Truy vấn SELECT trong MySQL</h1><p>Lệnh <b>SELECT</b> trong SQL được sử dụng để lấy dữ liệu từ MySQL Database.</p>\r\n<h2>Cú pháp</h2>\r\n<p>Cú pháp SQL cơ bản của lệnh SELECT để lấy dữ liệu từ bảng MySQL là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT truong1, truong2,...truongN FROM ten_bang\r\n[menhDe WHERE]\r\n[OFFSET M ][LIMIT N]\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p>Bạn có thể lấy một hoặc nhiều trường trong một lệnh SELECT đơn.</p></li>\r\n<li><p>Bạn có thể xác định một dấu sao (*) thay cho các trường. Trong trường hợp này, lệnh SELECT sẽ trả về tất cả các trường.</p></li>\r\n<li><p>Bạn có thể xác định bất kỳ điều kiện nào bởi sử dụng mệnh đề WHERE.</p></li>\r\n<li><p>Bạn có thể xác định một offset bởi sử dụng <b>OFFSET</b> để từ đó lệnh SELECT này sẽ bắt đầu trả về các bản ghi. Theo mặc định, offset là 0.</p></li>\r\n<li><p>Bạn có thể giới hạn số kết quả trả về bởi sử dụng thuộc tính <b>LIMIT</b>.</p></li>\r\n</ul><p>Sau đây là ví dụ để lấy tất cả bản ghi có trong bảng <b>sinhvienk60</b> có trong cơ sở dữ liệu <i>sinhvien</i> trong MySQL:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk60;\r\n</pre>\r\nKết quả như sau:\r\n<pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Cao        | 8.00    |\r\n|   2  | Nguyen Van     | Thanh      | 9.00    |\r\n|   3  | Nguyen Hoang   | Huong      | 7.50    |\r\n|   4  | Tran Van       | Nam	     | 10.0    |\r\n+------+----------------+------------+---------+\r\n</pre>\r\n<h2>Lấy dữ liệu bởi sử dụng PHP Script</h2>\r\n<p>Bạn có thể sử dụng cùng lệnh SELECT này trong hàm <b>mysql_query()</b> trong PHP. Hàm này được sử dụng để thực thi lệnh SQL và sau đó hàm PHP khác là <b>mysql_fetch_array()</b> có thể được sử dụng để lấy tất cả dữ liệu đã chọn. Hàm này trả về các hàng dưới dạng một mảng liên hợp, một mảng số hoặc cả hai. Hàm này trả về FALSE nếu không có các hàng nào như thế.</p>\r\n<p>Dưới đây là một ví dụ đơn giản để lấy các bản ghi từ bảng sinhvienk60.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Bạn theo dõi ví dụ sau để lấy tất cả bản ghi từ bảng sinhvienk60.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n<?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n$sql = \'SELECT mssv, ho, \r\n               ten, diemthi\r\n        FROM sinhvienk60\';\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the lay du lieu: \' . mysql_error());\r\n}\r\nwhile($row = mysql_fetch_array($retval, MYSQL_ASSOC))\r\n{\r\n    echo \"MSSV :{$row[\'mssv\']}  <br> \".\r\n         \"Ho: {$row[\'ho\']} <br> \".\r\n         \"Ten: {$row[\'ten\']} <br> \".\r\n         \"Diem Thi : {$row[\'diemthi\']} <br> \".\r\n         \"--------------------------------<br>\";\r\n} \r\necho \"Lay du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?>\r\n</pre>\r\n<p>Nội dung của các hàng được gán cho biến $row và sau đó các giá trị trong hàng được in.</p>\r\n<p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>insert.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/insert.php</i>.\r\n<p><b>Ghi chú:</b> Bạn luôn luôn nhớ đặt các dấu ngoặc móc ({) khi bạn muốn chèn một giá trị mảng trực tiếp vào trong một chuỗi.</p>\r\n<p>Trong ví dụ trên, hằng <b>MYSQL_ASSOC</b> được sử dụng như là tham số thứ hai cho hàm <b>mysql_fetch_array()</b> trong PHP, để mà nó trả về các hàng dưới dạng một mảng liên hợp. Với một mảng liên hợp, bạn có thể truy cập trường đó bởi sử dụng tên của chúng thay vì sử dụng chỉ mục.</p>\r\n<p>PHP cung cấp hàm khác là <b>mysql_fetch_assoc()</b> cũng trả về các hàng dưới dạng một mảng liên hợp.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau hiển thị tất cả bản ghi từ bảng tutorial_tbl bởi sử dụng hàm mysql_fetch_assoc() trong PHP.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n<?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n$sql = \'SELECT mssv, ho, \r\n               ten, diemthi\r\n        FROM sinhvienk60\';\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the lay du lieu: \' . mysql_error());\r\n}\r\nwhile($row = mysql_fetch_assoc($retval))\r\n{\r\n    echo \"MSSV :{$row[\'mssv\']}  <br> \".\r\n         \"Ho: {$row[\'ho\']} <br> \".\r\n         \"Ten: {$row[\'ten\']} <br> \".\r\n         \"Diem Thi : {$row[\'diemthi\']} <br> \".\r\n         \"--------------------------------<br>\";\r\n} \r\necho \"Lay du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?>\r\n</pre><p>Bạn cũng có thể sử dụng hằng <b>MYSQL_NUM</b> như là tham số thứ hai cho hàm PHP là mysql_fetch_array(). Điều này làm cho hàm trả về một mảng với chỉ mục dạng số.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau hiển thị tất cả bản ghi từ bảng tutorial_tbl bởi sử dụng tham số MYSQL_NUM:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n<?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n$sql = \'SELECT mssv, ho, \r\n               ten, diemthi\r\n        FROM sinhvienk60\';\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the lay du lieu: \' . mysql_error());\r\n}\r\nwhile($row = mysql_fetch_array($retval, MYSQL_NUM))\r\n{\r\n    echo \"MSSV :{$row[0]}  <br> \".\r\n         \"Ho: {$row[1]} <br> \".\r\n         \"Ten: {$row[2]} <br> \".\r\n         \"Diem Thi : {$row[3]} <br> \".\r\n         \"--------------------------------<br>\";\r\n}\r\necho \"Lay du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?>\r\n</pre>\r\n<p>Các ví dụ trên sẽ cho cùng kết quả.</p>\r\n<h2>Giải phóng bộ nhớ trong MySQL</h2>\r\n<p>Giải phóng bộ nhớ ở phần cuối mỗi lệnh SELECT là một bài thực hành tốt. Điều này có thể được thực hiện bởi sử dụng hàm <b>mysql_free_result()</b> trong PHP. Dưới đây là ví dụ minh họa cách sử dụng của hàm này.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Bạn thử ví dụ sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n<?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n$sql = \'SELECT mssv, ho, \r\n               ten, diemthi\r\n        FROM sinhvienk60\';\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the lay du lieu: \' . mysql_error());\r\n}\r\nwhile($row = mysql_fetch_array($retval, MYSQL_NUM))\r\n{\r\n    echo \"MSSV :{$row[0]}  <br> \".\r\n         \"Ho: {$row[1]} <br> \".\r\n         \"Ten: {$row[2]} <br> \".\r\n         \"Diem Thi : {$row[3]} <br> \".\r\n         \"--------------------------------<br>\";\r\n}\r\nmysql_free_result($retval);\r\necho \"Lay du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?>\r\n</pre>\r\n<p>Trong khi lấy dữ liệu, bạn có thể viết các lệnh SQL phức tạp tùy theo ý muốn của bạn. Và thủ tục sẽ giống như đã đề cập ở trên.</p>\r\n',2),(15,'Mệnh đề Where','<h1>Mệnh đề WHERE trong MySQL</h1><p>Trong chương trước chúng ta đã được giới thiệu cách sử dụng của lệnh <b>SELECT</b> trong SQL để lấy dữ liệu từ bảng MySQL. Chúng ta có thể sử dụng một mệnh đề điều kiện gọi là mệnh đề <b>WHERE</b> để lọc các kết quả thu được. Sử dụng mệnh đề WHERE, chúng ta có thể xác định một tiêu chuẩn lựa chọn để chọn các bản ghi cần thiết từ một bảng.</p>\r\n<h2>Cú pháp</h2>\r\n<p>Cú pháp SQL chung của lệnh SELECT với mệnh đề WHERE để lấy dữ liệu từ bảng MySQL là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT truong1, truong2,...truongN FROM ten_bang\r\n[WHERE dieuKien1 [AND [OR]] dieuKien2.....\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p>Bạn có thể xác định bất kỳ điều kiện nào bởi sử dụng mệnh đề WHERE.</p></li>\r\n<li><p>Bạn có thể xác định nhiều hơn một điều kiện bởi sử dụng các toán tử <b>AND</b> và <b>OR</b>.</p></li>\r\n<li><p>Một mệnh đề WHERE có thể được sử dụng cùng với lệnh DELETE hoặc UPDATE trong SQL để xác định một điều kiện.</p></li>\r\n</ul><p>Mệnh đề <b>WHERE</b> làm việc giống như một điều kiện <b>if</b> trong bất kỳ ngôn ngữ lập trình nào. Mệnh đề này được sử dụng để so sánh giá trị đã cho với giá trị trường có sẵn trong bảng MySQL. Nếu giá trị đã cho bên ngoài là bằng với giá trị trường có sẵn trong bảng MySQL, thì nó sẽ trả về hàng đó.</p>\r\n<p>Dưới đây là danh sách các toán tử có thể được sử dụng với mệnh đề WHERE:</p>\r\n<p>Giả sử trường A giữ 10 và trường B giữ 20, thì:</p>\r\n<table class=\"table table-bordered\" style=\"width:100%\">\r\n<tr>\r\n<th style=\"width:10%\">Toán tử</th><th style=\"width:45%\">Miêu tả</th><th>Ví dụ</th>\r\n</tr>\r\n<tr>\r\n<td>=</td><td> Kiểm tra xem giá trị của hai toán hạng có cân bằng không, nếu có thì điều kiện trở thành true</td><td> (A = B) là không true </td>\r\n</tr>\r\n<tr>\r\n<td>!=</td><td> Kiểm tra xem giá trị của hai toán hạng là cân bằng hay là không, nếu không cân bằng thì điều kiện trở thành true</td><td> (A != B) là true </td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td><td> Kiểm tra xem giá trị của toán hạng trái có lớn hơn giá trị của toán hạng phải không, nếu có thì điều kiện trở thành true </td><td> (A &gt; B) là không true </td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td><td> Kiểm tra xem giá trị của toán hạng trái có nhỏ hơn giá trị của toán hạng phải không, nếu có thì điều kiện trở thành true </td><td> (A &lt; B) là true </td>\r\n</tr>\r\n<tr>\r\n<td>&gt;=</td><td> Kiểm tra xem giá trị của toán hạng trái có lớn hơn hoặc bằng giá trị của toán hạng phải không, nếu có thì điều kiện trở thành true </td><td> (A &gt;= B) là không true </td>\r\n</tr>\r\n<tr>\r\n<td>&lt;=</td><td> Kiểm tra xem giá trị của toán hạng trái có nhỏ hơn hoặc bằng giá trị của toán hạng phải không, nếu có thì điều kiện trở thành true </td><td> (A &lt;= B) là true </td>\r\n</tr>\r\n</table>\r\n<p>Mệnh đề WHERE là hữu ích khi bạn muốn lấy các hàng đã được lựa chọn từ một bảng, đặc biệt khi bạn sử dụng <b>JOIN</b> trong MySQL. Các JOIN sẽ được trình bày trong chương khác.</p>\r\n<p>Sử dụng <b>Primary Key</b> là thói quen phổ biến để tìm kiếm các bản ghi để giúp việc tìm kiếm này nhanh hơn.</p>\r\n<p>Nếu điều kiện đã cho không so khớp với bất kỳ bản ghi nào trong bảng, thì truy vấn sẽ không trả về bất kỳ hàng nào.</p>\r\n<h2>Ví dụ lấy dữ liệu với mệnh đề WHERE trong MySQL</h2>\r\n<p>Ví dụ sau sẽ trả về tất cả bản ghi từ bảng <b>sinhvienk60</b> mà có tên là Thanh:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk60 WHERE ten=\"Thanh\";\r\n</pre>\r\n<p>Kết quả là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n+------+------------+------------+---------+\r\n| mssv | ho         | ten        | diemthi |\r\n+------+------------+------------+---------+\r\n|  2   | Nguyen Van | Thanh      | 9.00    |\r\n+------+------------+------------+---------+\r\n</pre>\r\n<p>Trừ khi thực hiện một so sánh <b>LIKE</b> trên một chuỗi, việc so sánh là không phân biệt kiểu chữ. Bạn có thể làm cho việc tìm kiếm là phân biệt kiểu chữ bởi sử dụng từ khóa <b>BINARY</b> như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk60 WHERE BINARY ten=\"thanh\";\r\n</pre>\r\n<p>Với bảng đã tạo của chúng ta thì không có bản ghi nào có tên là <i>thanh</i>, do đó lệnh trên không cho kết quả nào.</p>\r\n<h2>Lấy dữ liệu với mệnh đề WHERE bởi sử dụng PHP Script</h2>\r\n<p>Bạn có thể sử dụng cùng lệnh SQL là SELECT với mệnh đề WHERE trong hàm PHP là <b>mysql_query()</b>. Hàm này được sử dụng để thực thi lệnh SQL và sau đó hàm PHP khác là <b>mysql_fetch_array()</b> có thể được sử dụng để lấy toàn bộ dữ liệu đã chọn. Hàm này trả về các hàng dưới dạng một mảng liên hợp, một mảng số hoặc cả hai. Hàm này trả về FALSE nếu không có hàng nào như vậy.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau trả về tất cả bản ghi có tên là <b>Thanh</b> từ bảng sinhvienk60:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n$sql = \'SELECT mssv, ho, \r\n               ten, diemthi\r\n        FROM sinhvienk60\r\n        WHERE ten=\"Thanh\"\';\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the lay du lieu: \' . mysql_error());\r\n}\r\nwhile($row = mysql_fetch_array($retval, MYSQL_ASSOC))\r\n{\r\n    echo \"MSSV :{$row[\'mssv\']}  &lt;br&gt; \".\r\n         \"Ho: {$row[\'ho\']} &lt;br&gt; \".\r\n         \"Ten: {$row[\'ten\']} &lt;br&gt; \".\r\n         \"Diem Thi : {$row[\'diemthi\']} &lt;br&gt; \".\r\n         \"--------------------------------&lt;br&gt;\";\r\n} \r\necho \"Lay du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?&gt;\r\n</pre>\r\n<p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>where.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/where.php</i>',2),(16,'Truy vấn Update','<h1>Truy vấn UPDATE trong MySQL</h1><p>Dữ liệu đang tồn tại trong một bảng MySQL có thể cần được sửa đổi. Bạn có thể thực hiện điều này bởi sử dụng lệnh <b>UPDATE</b> trong SQL. Lệnh này sẽ sửa đổi bất kỳ giá trị trường nào trong bất cứ bảng MySQL nào.</p>\r\n<h2>Cú pháp</h2>\r\n<p>Dưới đây là cú pháp SQL chung của lệnh UPDATE để sửa đổi dữ liệu trong bảng MySQL:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nUPDATE ten_bang SET truong1=giaTri_moi_1, truong2=giaTri_moi_2\r\n[MenhDe WHERE];\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p>Bạn có thể cập nhật một hoặc nhiều trường.</p></li>\r\n<li><p>Bạn có thể xác định bất kỳ điều kiện nào bởi sử dụng mệnh đề WHERE.</p></li>\r\n<li><p>Bạn có thể cập nhật các giá trị trong một bảng đơn tại một thời điểm.</p></li>\r\n</ul>\r\n<p>Mệnh đề WHERE là hữu ích khi bạn muốn cập nhật các hàng đã chọn trong một bảng.</p>\r\n<h2>Cập nhật dữ liệu trong MySQL</h2>\r\n<p>Bạn sử dụng lệnh UPDATE với mệnh đề WHERE trong SQL để cập nhật dữ liệu đã chọn vào trong bảng MySQL.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau sẽ cập nhật bản ghi có <b>mssv</b> là 3 trong trường <b>ten</b> trong bảng sinhvienk60:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nUPDATE sinhvienk60 SET ten=\"Huong\" WHERE mssv=3;\r\n</pre>\r\n<p>Nếu bạn sử dụng lệnh SELECT với bảng trên:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk60;\r\n</pre>\r\n<p>Thì kết quả là bản ghi có mssv=3 đã thay đổi tên từ Manh thành Hương.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Cao        | 8.00    |\r\n|   2  | Nguyen Van     | Thanh      | 9.00    |\r\n|   3  | Nguyen Hoang   | Huong      | 7.50    |\r\n|   4  | Tran Van       | Nam	     | 10.0    |\r\n+------+----------------+------------+---------+\r\n</pre>\r\n<h2>Cập nhật dữ liệu bởi sử dụng PHP Script</h2>\r\n<p>Bạn có thể sử dụng lệnh UPDATE với hoặc không với mệnh đề WHERE trong hàm PHP là <b>mysql_query()</b>. Hàm này sẽ thực thi lệnh SQL theo cách tương tự như tại dòng nhắc lệnh mysql>.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau để xóa một bản ghi từ bảng sinhvienk60 có mssv là 4:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n<?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n$sql = \'DELETE FROM sinhvienk60\r\n        WHERE mssv=4\';\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the xoa du lieu: \' . mysql_error());\r\n}\r\necho \"Xoa du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?>\r\n</pre>.',2),(17,'Truy vấn Delete','<h1>Truy vấn DELETE trong MySQL</h1><p>Nếu bạn muốn xóa một bản ghi từ bất cứ bảng MySQl nào, thì bạn có thể sử dụng lệnh DELETE FROM trong SQL.</p>\r\n<h2>Cú pháp</h2>\r\n<p>Cú pháp SQL chung của lệnh DELETE để xóa dữ liệu từ một bảng MySQL là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nDELETE FROM ten_bang [Menhde WHERE]\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p>Nếu mệnh đề WHERE không được xác định, thì tất cả bản ghi sẽ bị xóa từ bảng MySQL đã cho.</p></li>\r\n<li><p>Bạn có thể xác định bất kỳ điều kiện nào với mệnh đề WHERE.</p></li>\r\n<li><p>Bạn có thể xóa các bản ghi trong một bảng đơn tại cùng một thời điểm.</p></li>\r\n</ul>\r\n<p>Mệnh đề WHERE là thực sự hữu ích khi bạn muốn xóa các hàng đã chọn trong một bảng. Nếu không xác định mệnh đề WHERE thì thật sự rất nguy hiểm bởi vì <b>toàn bộ bảng của bạn sẽ bị xóa</b>. Do đó bạn phải thật cẩn thận khi sử dụng lệnh này.</p><h2>Xóa dữ liệu trong MySQL</h2>\r\n<p>Ví dụ sau sẽ xóa một bản ghi trong bảng sinhvienk60 có mssv là 4.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nDELETE FROM sinhvienk60 WHERE mssv=4;\r\n</pre>\r\n<p>Bây giờ, nếu bạn sử dụng lệnh SELECT với bảng trên:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk60;\r\n</pre>\r\n<p>Thì kết quả là bản ghi có mssv=4 đã bị xóa và trong bảng sinhvienk60 của chúng ta chỉ còn lại 3 bản ghi.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Cao        | 8.00    |\r\n|   2  | Nguyen Van     | Thanh      | 9.00    |\r\n|   3  | Nguyen Hoang   | Huong      | 7.50    |\r\n+------+----------------+------------+---------+\r\n</pre>\r\n<h2>Xóa dữ liệu bởi sử dụng PHP Script</h2>\r\n<p>Bạn có thể sử dụng lệnh DELETE với hoặc không với mệnh đề WHERE trong hàm PHP là <b>mysql_query()</b>. Hàm này sẽ thực thi lệnh SQL theo cách tương tự như tại dòng nhắc mysql>.</p><h2>Ví dụ</h2>\r\n<p>Ví dụ sau để xóa một bản ghi từ bảng sinhvienk60 có mssv là 4:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\"><span class=\"pun\"><?</span><span class=\"pln\">php\r\n$dbhost </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\'localhost:3306\'</span><span class=\"pun\">;</span><span class=\"pln\">\r\n$dbuser </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\'root\'</span><span class=\"pun\">;</span><span class=\"pln\">\r\n$dbpass </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\'123456\'</span><span class=\"pun\">;</span><span class=\"pln\">\r\n$conn </span><span class=\"pun\">=</span><span class=\"pln\"> mysql_connect</span><span class=\"pun\">(</span><span class=\"pln\">$dbhost</span><span class=\"pun\">,</span><span class=\"pln\"> $dbuser</span><span class=\"pun\">,</span><span class=\"pln\"> $dbpass</span><span class=\"pun\">);</span><span class=\"pln\">\r\n</span><span class=\"kwd\">if</span><span class=\"pun\">(!</span><span class=\"pln\"> $conn </span><span class=\"pun\">)</span><span class=\"pln\">\r\n</span><span class=\"pun\">{</span><span class=\"pln\">\r\n  </span><span class=\"kwd\">die</span><span class=\"pun\">(</span><span class=\"str\">\'Khong the ket noi: \'</span><span class=\"pln\"> </span><span class=\"pun\">.</span><span class=\"pln\"> mysql_error</span><span class=\"pun\">());</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span><span class=\"pln\">\r\n$sql </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\'DELETE FROM sinhvienk60\r\n        WHERE mssv=4\'</span><span class=\"pun\">;</span><span class=\"pln\">\r\n\r\nmysql_select_db</span><span class=\"pun\">(</span><span class=\"str\">\'sinhvien\'</span><span class=\"pun\">);</span><span class=\"pln\">\r\n$retval </span><span class=\"pun\">=</span><span class=\"pln\"> mysql_query</span><span class=\"pun\">(</span><span class=\"pln\"> $sql</span><span class=\"pun\">,</span><span class=\"pln\"> $conn </span><span class=\"pun\">);</span><span class=\"pln\">\r\n</span><span class=\"kwd\">if</span><span class=\"pun\">(!</span><span class=\"pln\"> $retval </span><span class=\"pun\">)</span><span class=\"pln\">\r\n</span><span class=\"pun\">{</span><span class=\"pln\">\r\n  </span><span class=\"kwd\">die</span><span class=\"pun\">(</span><span class=\"str\">\'Khong the xoa du lieu: \'</span><span class=\"pln\"> </span><span class=\"pun\">.</span><span class=\"pln\"> mysql_error</span><span class=\"pun\">());</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span><span class=\"pln\">\r\necho </span><span class=\"str\">\"Xoa du lieu thanh cong\\n\"</span><span class=\"pun\">;</span><span class=\"pln\">\r\nmysql_close</span><span class=\"pun\">(</span><span class=\"pln\">$conn</span><span class=\"pun\">);</span><span class=\"pln\">\r\n</span><span class=\"pun\">?></span></pre>\r\n</pre>',2),(18,'Mệnh đề Like','<h1>Mệnh đề LIKE trong MySQL</h1><p>Trong các chương trước, bạn đã thấy cách sử dụng lệnh <b>SELECT</b> trong SQL để lấy dữ liệu từ bảng MySQL. Bạn cũng đã hiểu cách sử dụng một mệnh đề điều kiện <b>WHERE</b> để chọn các bản ghi cần thiết.</p>\r\n<p>Mệnh đề WHERE với dấu bằng (=) làm việc khá khéo léo khi chúng ta muốn thực hiện một so khớp chính xác. Giống lệnh <b>if \"ho = \'Nguyen\'\"</b>. Nhưng có thể bạn muốn lọc tất cả kết quả mà trong <b>ho</b> chứa \"nguyen\". Việc này có thể được xử lý bởi sử dụng mệnh đề <b>LIKE</b> đi cùng với mệnh đề WHERE.</p>\r\n<p>Nếu mệnh đề LIKE trong SQL được sử dụng với các ký tự %, thì nó làm việc giống như một siêu ký tự (*) trong UNIX trong khi liệt kê tất cả các file hoặc thư mục tại dòng nhắc lệnh.</p>\r\n<p>Khi không sử dụng ký tự %, mệnh đề LIKE là giống như dấu bằng đi cùng với mệnh đề WHERE.</p>\r\n<h2>Cú pháp</h2>\r\n<p>Cú pháp SQL chung của lệnh SELECT đi cùng với mệnh đề LIKE để lấy dữ liệu từ bảng MySQL là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT truong1, truong2,...truongN FROM ten_bang\r\nWHERE truong1 LIKE dieuKien [AND [OR]] truong2 = \'giaTri\'\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p>Bạn có thể xác định bất kỳ điều kiện nào bởi sử dụng mệnh đề WHERE.</p></li>\r\n<li><p>Bạn có thể sử dụng mệnh đề LIKE cùng với mệnh đề WHERE.</p></li>\r\n<li><p>Bạn có thể sử dụng mệnh đề LIKE thay cho dấu bằng.</p></li>\r\n<li><p>Khi LIKE được sử dụng cùng với ký hiệu % thì nó làm việc giống như một siêu ký tự *.</p></li>\r\n<li><p>Bạn có thể xác định nhiều hơn một điều kiện bởi sử dụng các toán tử <b>AND</b> hoặc <b>OR</b>.</p></li>\r\n<li><p>Một mệnh đề WHERE…LIKE có thể được sử dụng cùng với lệnh DELETE hoặc UPDATE trong SQL để xác định một điều kiện.</p></li>\r\n</ul><h2>Sử dụng mệnh đề LIKE trong MySQL</h2>\r\n<p>Để lấy dữ liệu đã được lựa chọn từ bảng MySQL, bạn có thể sử dụng lệnh SELECT với mệnh đề WHERE…LIKE.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau trả về tất cả bản ghi từ bảng sinhvienk60 có <b>ho</b> bắt đầu với từ <i>Nguyen</i>:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk60 WHERE ho LIKE \'Nguyen%\';\r\n</pre>\r\nKết quả là:\r\n<pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   2  | Nguyen Van     | Thanh      | 9.00    |\r\n|   3  | Nguyen Hoang   | Huong      | 7.50    |\r\n+------+----------------+------------+---------+\r\n</pre>\r\n<h2>Sử dụng mệnh đề LIKE bên trong PHP Script</h2>\r\n<p>Bạn dùng cú pháp tương tự của mệnh đề WHERE…LIKE trong hàm PHP là <b>mysql_query()</b>. Hàm này được sử dụng để thực thi lệnh SQL và sau đó hàm PHP khác là <b>mysql_fetch_array()</b> có thể được sử dụng để lấy dữ liệu đã chọn nếu mệnh đề WHERE…LIKE được sử dụng cùng với lệnh SELECT.</p>\r\n<p>Nhưng nếu mệnh đề WHERE…LIKE đang được sử dụng với lệnh DELETE hoặc UPDATE thì lời gọi hàm PHP là không cần thiết.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Bạn thử ví dụ sau để trả về tất cả bản ghi từ bảng sinhvienk60 có <b>ho</b> bắt đầu với từ <i>Nguyen</i>:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n<?php\r\n$dbhost = \'localhost:3036\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n$sql = \'SELECT mssv, ho, \r\n               ten, diemthi\r\n        FROM sinhvienk60\r\n        WHERE ho LIKE \"Nguyen%\"\';\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the lay du lieu: \' . mysql_error());\r\n}\r\nwhile($row = mysql_fetch_array($retval, MYSQL_ASSOC))\r\n{\r\n    echo \"MSSV :{$row[\'mssv\']}  <br> \".\r\n         \"Ho : {$row[\'ho\']} <br> \".\r\n         \"Ten : {$row[\'ten\']} <br> \".\r\n         \"Diem Thi : {$row[\'diemthi\']} <br> \".\r\n         \"--------------------------------<br>\";\r\n} \r\necho \"Lay du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?>\r\n</pre>\r\n<p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>like.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/like.php</i>',2),(19,'Mệnh đề Order By','<h1>Mệnh đề ORDER BY trong MySQL</h1><p>Bạn đã thấy cách lệnh <b>SELECT</b> trong SQL lấy dữ liệu từ bảng MySQL. Khi bạn chọn các hàng, MySQL Server tự do trả về chúng trong bất kỳ thứ tự nào, trừ khi bạn chỉ thị cho nó cách sắp xếp kết quả. Bạn có thể sắp xếp một tập kết quả bởi việc thêm một mệnh đề <b>ORDER BY</b> mà xác định rõ các hàng hoặc các cột bạn muốn sắp xếp.</p>\r\n<h2>Cú pháp</h2>\r\n<p>Cú pháp SQL chung của lệnh SELECT đi cùng với mệnh đề ORDER BY để sắp xếp dữ liệu từ bảng MySQL là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT truong1, truong2,...truongN FROM ten_bang\r\nORDER BY truong1, [truong2...] [ASC [DESC]]\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p>Bạn có thể sắp xếp kết quả trả về trên bất kỳ trường nào.</p></li>\r\n<li><p>Bạn có thể sắp xếp kết quả trên nhiều hơn một trường.</p></li>\r\n<li><p>Bạn có thể sử dụng từ khóa ASC hoặc DESC để nhận kết quả theo thứ tự tăng dần hoặc giảm dần. Theo mặc định, thứ tự là tăng dần.</p></li>\r\n<li><p>Bạn có thể sử dụng mệnh đề WHERE…LIKE theo cách thông thường để xác định điều kiện.</p></li>\r\n</ul>\r\n<h2>Sử dụng mệnh đề ORDER BY để sắp xếp kết quả trong MySQL</h2>\r\n<p>Để lấy và sắp xếp dữ liệu từ bảng MySQL, bạn có thể sử dụng lệnh SELECT với mệnh đề ORDER BY.</p>\r\n<p>Ví dụ sau sẽ trả về các bản ghi <b>diemthi</b> theo thứ tự tăng dần.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk60 ORDER BY diemthi ASC;\r\n</pre>\r\n<p>Kết quả là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   3  | Nguyen Hoang   | Huong      | 7.50    |\r\n|   1  | Dinh Van       | Cao        | 8.00    |\r\n|   2  | Nguyen Van     | Thanh      | 9.00    |\r\n+------+----------------+------------+---------+\r\n</pre><h2>Sử dụng mệnh đề ORDER BY bên trong PHP Script</h2>\r\n<p>Bạn sử dụng cú pháp tương tự của mệnh đề ORDER BY trong hàm PHP là <b>mysql_query()</b>. Hàm này được sử dụng để thực thi lệnh SQL và sau đó hàm PHP khác là <b>mysql_fetch_array()</b> có thể được sử dụng để lấy tất cả dữ liệu đã chọn.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau trả về kết quả với thứ tự giảm dần của <b>ten</b>:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n$sql = \'SELECT mssv, ho, \r\n               ten, diemthi\r\n        FROM sinhvienk60\r\n        ORDER BY  ten DESC\';\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the lay du lieu: \' . mysql_error());\r\n}\r\nwhile($row = mysql_fetch_array($retval, MYSQL_ASSOC))\r\n{\r\n    echo \"MSSV :{$row[\'mssv\']}  &lt;br&gt; \".\r\n         \"Ho : {$row[\'ho\']} &lt;br&gt; \".\r\n         \"Ten : {$row[\'ten\']} &lt;br&gt; \".\r\n         \"Diem Thi : {$row[\'diemthi\']} &lt;br&gt; \".\r\n         \"--------------------------------&lt;br&gt;\";\r\n} \r\necho \"Lay du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?&gt;\r\n</pre>\r\n<p>Sao chép code trên trong một trình soạn thảo chẳng hạn, lưu là <b>orderby.php</b>, bạn cần xác định các tham số $dbuser và $dbpass thích hợp (tùy theo cách bạn đã thiết lập với MySQL), sau đó, mở trình duyệt, chạy <i>locallhost/orderby.php</i>',2),(20,'Sử dụng Join','<h1>Sử dụng JOIN trong MySQL</h1>\r\n<p>Tới chương này, chúng ta mới chỉ lấy dữ liệu từ một bảng tại một thời điểm. Điều này là khá tốt cho những tác vụ đơn giản, nhưng trong thực tiễn khi sử dụng MySQL, chúng ta thường cần lấy dữ liệu từ nhiều bảng trong một truy vấn đơn.</p>\r\n<p>Bạn có thể sử dụng nhiều bảng trong truy vấn SQL đơn. Hoạt động Join trong MySQL có thể được hiểu như là việc ghim hai hoặc nhiều bảng vào trong một bảng đơn.</p>\r\n<p>Bạn có thể sử dụng JOIN trong các lệnh SELECT, UPDATE và DELETE để kết hợp các bảng MySQL. Chúng ta sẽ xem một ví dụ về LEFT JOIN cũng như sự khác nhau giữa các JOIN trong MySQL.</p>\r\n<h2>Sử dụng JOIN trong MySQL</h2>\r\n<p>Trước khi bắt đầu ví dụ, chúng ta cần tạo thêm một bảng <b>hocphik60</b> trong cơ sở dữ liệu <b>sinhvien</b>. Bây giờ chúng ta có hai bảng như sau:</p>\r\n<p><b>Bảng sinhvienk60</b> có dữ liệu:</p><pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Cao        | 8.00    |\r\n|   2  | Nguyen Van     | Thanh      | 9.00    |\r\n|   3  | Nguyen Hoang   | Huong      | 7.50    |\r\n+------+----------------+------------+---------+\r\n</pre><p>Tạo bảng <b>hocphik60</b> và chèn dữ liệu vào bảng.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//Lua chon co so du lieu\r\nUSE sinhvien;\r\n//Tao bang\r\nCREATE TABLE hocphik60 (\r\n ten VARCHAR(255) NOT NULL,\r\nhocphi INT NOT NULL\r\n);\r\n\r\n//Chen du lieu vao bang\r\nINSERT INTO hocphik60 (ten, hocphi)\r\nVALUES (\'Nam\', 4000000);\r\n\r\nINSERT INTO hocphik60 (ten, hocphi)\r\nVALUES (\'Thanh\', 3500000);\r\n\r\nINSERT INTO hocphik60 (ten, hocphi)\r\nVALUES (\'Cao\', 4500000);\r\n\r\nINSERT INTO hocphik60 (ten, hocphi)\r\nVALUES (\'Huong\', 3000000);\r\n</pre>\r\n<p>Sau đó, bạn sử dụng lệnh <b>SELECT * FROM hocphik60</b> ta sẽ có bảng như sau:</p><pre class=\"prettyprint notranslate\">\r\n+------------+--------------+\r\n| ten        | hocphi       |\r\n+------------+--------------+\r\n| Nam        | 4.000.000    |\r\n| Thanh      | 3.500.000    |\r\n| Cao        | 4.500.000    |\r\n| Huong	     | 3.000.000    |\r\n+------------+--------------+\r\n</pre><p>Bây giờ, chúng ta có thể viết một truy vấn SQL để kết hợp hai bảng trên. Truy vấn này sẽ lựa chọn tất cả <b>ten</b> từ bảng <i>sinhvienk60</i> và sẽ lựa chọn số <b>hocphi</b> tương ứng từ bảng <i>hocphik60</i>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT a.mssv, a.ten, b.hocphi\r\n    FROM sinhvienk60 a, hocphik60 b\r\n    WHERE a.ten = b.ten;\r\n</pre>\r\n<p>Kết quả là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n+------+------------+--------------+\r\n| mssv | ten        | hocphi       |\r\n+------+------------+--------------+\r\n|   2  | Thanh      | 3.500.000    |\r\n|   1  | Cao        | 4.500.000    |\r\n|   3  | Huong	     | 3.000.000    |\r\n+------+------------+--------------+\r\n</pre>\r\n<h2>Sử dụng JOIN trong PHP Script</h2>\r\n<p>Bạn có thể sử dụng bất kỳ truy vấn SQL nào ở trên trong PHP Script. Bạn chỉ cần truyền truy vấn SQL vào trong hàm PHP là <b>mysql_query()</b> và sau đó bạn sẽ lấy các kết quả theo cách thức thông thường.</p>\r\n<p>Dưới đây là ví dụ minh họa sự sử dụng JOIN trong PHP script:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n$sql = \'SELECT a.mssv, a.ten, b.hocphi\r\n        FROM sinhvienk60 a, hocphik60 b\r\n        WHERE a.ten = b.ten\';\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the lay du lieu: \' . mysql_error());\r\n}\r\nwhile($row = mysql_fetch_array($retval, MYSQL_ASSOC))\r\n{\r\n    echo \"Ten:{$row[\'ten\']}  &lt;br&gt; \".\r\n         \"Hoc Phi: {$row[\'hocphi\']} &lt;br&gt; \".\r\n         \"MSSV : {$row[\'mssv\']} &lt;br&gt; \".\r\n         \"--------------------------------&lt;br&gt;\";\r\n} \r\necho \"Lay du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?&gt;\r\n</pre>\r\n<h2>RIGHT JOIN trong MySQL</h2>\r\n<p><b>RIGHT JOIN</b> trong SQL trả về tất cả hàng từ bảng bên phải, ngay cả khi không có so khớp nào trong bảng bên trái. Nghĩa là nếu mệnh đề ON so khớp với 0 bản ghi trong bảng bên trái, thì RIGHT JOIN sẽ vẫn trả về một hàng trong kết quả, nhưng với NULL trong mỗi cột từ bảng bên trái.</p>\r\n<p>Bạn thử ví dụ minh họa RIGHT JOIN với hai bảng trên như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT a.mssv, a.ten, b.hocphi\r\n    FROM sinhvienk60 a RIGHT JOIN hocphik60 b\r\n    ON a.ten = b.ten;\r\n</pre><p>Kết quả là:</p><pre class=\"prettyprint notranslate\">\r\n+------+------------+--------------+\r\n| mssv | ten        | hocphi       |\r\n+------+------------+--------------+\r\n|   2  | Thanh      | 3.500.000    |\r\n|   1  | Cao        | 4.500.000    |\r\n|   3  | Huong	     | 3.000.000    |\r\n+------+------------+--------------+\r\n</pre><p>Bạn cần làm nhiều bài thực hành để làm quen với các JOIN trong MySQL. Đây là một khái niệm khá phức tạp trong MySQL/SQL và bạn sẽ hiểu rõ hơn trong khi thực hành các ví dụ thực tế.</p>\r\n<p>Hoặc bạn có thể tham khảo cách sử dụng JOIN trong SQL được trình bày trong loạt bài hướng dẫn về SQL của chúng tôi. Bạn vào trang: <a href=\"../sql/su_dung_join_trong_sql.jsp\"><b style=\"color:green;\">Sử dụng JOIN trong SQL</b></a></p>',2),(21,'Giá trị NULL','<h1>Xử lý giá trị NULL trong MySQL</h1><p>Bạn đã thấy cách lệnh SELECT cùng với mệnh đề WHERE trong SQL lấy dữ liệu từ bảng MySQL, nhưng khi chúng ta cố gắng cung cấp một điều kiện so sánh giá trị trường hoặc giá trị cột với <b>NULL</b>, nó làm việc không chính xác.</p>\r\n<p>Để xử lý những tình huống như vậy, MySQL cung cấp 3 toán tử:</p>\r\n<ul class=\"list\">\r\n<li><p><b>IS NULL:</b> Toán tử này trả về true nếu giá trị cột là NULL.</p></li>\r\n<li><p><b>IS NOT NULL:</b> Toán tử này trả về true nếu giá trị côt không là NULL.</p></li>\r\n<li><p><b>&lt;=&gt;:</b>  Toán tử này so sánh các giá trị, mà (không giống toán tử =) là true khi hai giá trị là NULL.</p></li>\r\n</ul>\r\n<p>Các điều kiện liên quan tới NULL là khá đặc biệt. Bạn không thể sử dụng = NULL hoặc != NULL để tìm giá trị NULL trong các cột. Những so sánh như thế luôn luôn thất bại bởi vì nó là không thể để nói rằng có hay không chúng là true. Ngay cả NULL = NULl cũng thất bại.</p>\r\n<p>Để tìm các cột là hoặc không là NULL, sử dụng toán tử IS NULL hoặc IS NOT NULL trong MySQL.</p>\r\n<h2>Sử dụng giá trị NULL trong MySQL</h2>\r\n<p>Giả sử tạo một bảng <b>hocphik59</b> trong cơ sở dữ liệu <i>sinhvien</i>. Bảng này gồm hai cột là <b>ten</b> và <b>hocphi</b> (bạn chú ý rằng trong khi tạo bảng ở trường học phí ta đã không ràng buộc điều kiện <b>NOT NULL</b> và khi chèn dữ liệu mình đã để trống hai trường).</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//Chon co so du lieu\r\n\r\nUSE sinhvien;\r\n//Tao bang hocphik59\r\n\r\nCREATE TABLE hocphik59 (\r\n ten VARCHAR(255) NOT NULL,\r\nhocphi INT\r\n);\r\n\r\n//Chen du lieu vao bang hocphik59\r\nINSERT INTO hocphik59 (ten, hocphi)\r\nVALUES (\'Nam\', 4000000);\r\n\r\nINSERT INTO hocphik59 (ten, hocphi)\r\nVALUES (\'Thanh\', NULL);\r\n\r\nINSERT INTO hocphik59 (ten, hocphi)\r\nVALUES (\'Cao\', NULL);\r\n\r\nINSERT INTO hocphik59 (ten, hocphi)\r\nVALUES (\'Huong\', 3000000);\r\n</pre><p>Sau đó, sử dụng lệnh <b>SELECT * FROM hocphik59;</b> sẽ cho kết quả:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM hocphik59;\r\n//ket qua la:\r\n+--------+-------------+\r\n| ten    |   hocphi    |\r\n+--------+-------------+\r\n| Nam    |   4000000   |\r\n| Thanh  |   NULL      |\r\n| Cao    |   NULL      |\r\n| Huong  |   3000000   |\r\n+--------+-------------+\r\n</pre>\r\n<p>Bây giờ, nếu bạn sử dụng<b> = và !=</b> với cột <b>hocphi</b>, bạn sẽ thấy rằng chúng không làm việc với các giá trị NULL, và sẽ không có kết quả được trả về:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM hocphik59 WHERE hocphi = NULL;\r\n0 row(s) returned \r\nmysql&gt; SELECT * FROM hocphik59 WHERE hocphi != NULL;\r\n0 row(s) returned\r\n</pre>\r\n<p>Để tìm các bản ghi mà cột <b>hocphi</b> là hoặc không là NULL, các truy vấn nên được viết như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM hocphik59 \r\n   WHERE hocphi IS NULL;\r\n\r\n//Ket qua la:\r\n+--------+-------------+\r\n| ten    |   hocphi    |\r\n+--------+-------------+\r\n| Thanh  |   NULL      |\r\n| Cao    |   NULL      |\r\n+--------+-------------+\r\n\r\nSELECT * FROM hocphik59 \r\n   WHERE hocphi IS NOT NULL;\r\n   \r\n   //Ket qua la:\r\n+--------+-------------+\r\n| ten    |   hocphi    |\r\n+--------+-------------+\r\n| Nam    |   4000000   |\r\n| Huong  |   3000000   |\r\n+--------+-------------+\r\n</pre>\r\n<h2>Xử lý giá trị NULL trong PHP Script</h2>\r\n<p>Bạn có thể sử dụng điều kiện <b>if…else</b> để chuẩn bị một truy vấn dựa trên giá trị NULL.</p><p>Ví dụ sau lấy hocphi ra ngoài và sau đó so sánh nó với giá trị có sẵn trong bảng. Ở đây mình sử dụng hàm <b>isset($hocphi)</b> để kiểm tra xem biến hocphi đã có giá trị (khác null) hay chưa, nếu đã được thiết lập thì trả về giá trị True, nếu không là False.<p>\r\n<pre class=\"prettyprint notranslate\">\r\n&lt;?php\r\n$dbhost = \'localhost:3306\';\r\n$dbuser = \'root\';\r\n$dbpass = \'123456\';\r\n$conn = mysql_connect($dbhost, $dbuser, $dbpass);\r\nif(! $conn )\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\nif( isset($hocphi ))\r\n{\r\n   $sql = \'SELECT ten, hocphi\r\n           FROM  hocphik59\r\n           WHERE hocphi <b>=</b> $hocphi\';\r\n}\r\nelse\r\n{\r\n   $sql = \'SELECT ten, hocphi\r\n           FROM  hocphik59\r\n           WHERE hocphi <b>IS</b> $hocphi\';\r\n}\r\n\r\nmysql_select_db(\'sinhvien\');\r\n$retval = mysql_query( $sql, $conn );\r\nif(! $retval )\r\n{\r\n  die(\'Khong the lay du lieu: \' . mysql_error());\r\n}\r\nwhile($row = mysql_fetch_array($retval, MYSQL_ASSOC))\r\n{\r\n    echo \"Ten :{$row[\'ten\']}  &lt;br&gt; \".\r\n         \"Hoc Phi : {$row[\'hocphi\']} &lt;br&gt; \".\r\n         \"--------------------------------&lt;br&gt;\";\r\n} \r\necho \"Lay du lieu thanh cong\\n\";\r\nmysql_close($conn);\r\n?&gt;\r\n</pre>',2),(22,'Regexp trong MySQL','<h1>Regexp trong MySQL</h1><p>Bạn đã thấy cách MySQL so khớp mẫu (Pattern Matching) với <b>LIKE …%</b>. MySQL hỗ trợ hoạt động so khớp mẫu khác dựa trên Regular Expression và toán tử <b>REGEXP</b>. Nếu bạn đã hiểu về PHP hoặc PERL, thì nó là khá đơn giản để bạn hiểu về hoạt động này bởi vì việc so khớp này là khá tương tự như các Regular Expression trong các ngôn ngữ đó.</p>\r\n<p>Bảng dưới liệt kê các Pattern có thể được sử dụng cùng với toán tử <b>REGEXP</b>.</p>\r\n<table class=\"table table-bordered\">\r\n<tr>\r\n<th style=\"width:30%\">Pattern</th><th style=\"width:70%\">So khớp với</th>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">^</td><td style=\"width:70%\">Phần đầu của chuỗi</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">$</td><td style=\"width:70%\">Phần cuối của chuỗi</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">.</td><td style=\"width:70%\">Bất kỳ ký tự đơn nào</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">[...]</td><td style=\"width:70%\">Bất kỳ ký tự nào được liệt kê trong dấu ngoặc vuông</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">[^...]</td><td style=\"width:70%\">Bất kỳ ký tự nào không được liệt kê trong dấu ngoặc vuông</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">p1|p2|p3</td><td style=\"width:70%\">Bất kỳ mẫu p1, p2 hoặc p3 nào</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">*</td><td style=\"width:70%\">0 hoặc nhiều instance (sự thể hiện) của phần tử ở trước</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">+</td><td style=\"width:70%\">1 hoặc nhiều instance (sự thể hiện) của phần tử ở trước</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">{n}</td><td style=\"width:70%\">n instance (sự thể hiện) của phần tử ở trước</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:30%\">{m,n}</td><td style=\"width:70%\">Từ m tới n instance (sự thể hiện) của phần tử ở trước</td>\r\n</tr>\r\n</table>\r\n<h2>Ví dụ</h2>\r\n<p>Dựa vào bảng trên, bạn có thể thành lập nhiều kiểu truy vấn SQL đa dạng tùy theo yêu cầu của bạn. Ở đây, mình sẽ liệt kê một số kiểu cần thiết nhất. Giả sử chúng ta có một bảng <i>sinhvienk60</i> và có một trường là <i>ten</i>:</p>\r\n<p>Truy vấn để tìm tất cả <i>ten</i> bắt đầu với \'^Ng\':</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT ten FROM sinhvienk60 WHERE ten REGEXP \'^Ng\';\r\n</pre>\r\n<p>Truy vấn để tìm tất cả <i>ten</i> kết thúc với \'ng$\':</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT ten FROM sinhvienk60 WHERE ten REGEXP \'ng$\';\r\n</pre>\r\n<p>Truy vấn để tìm tất cả <i>ten</i> chứa \'ao\':</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT ten FROM sinhvienk60 WHERE ten REGEXP \'ao\';\r\n</pre>\r\n<p>Truy vấn để tìm tất cả <i>ten</i> bắt đầu với một nguyên âm và kết thúc với \'nh\':</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT ten FROM sinhvienk60 WHERE ten REGEXP \'^[aeiou]|nh$\';\r\n</pre>',2),(23,'Transaction trong MySQL','<h1>Transaction trong MySQL</h1><p>Transaction trong SQL là một đơn vị công việc được thực hiện bởi một Database. Transaction là đơn vị hoặc dãy công việc được thực hiện theo một thứ tự logic và hợp lý, có thể được thao tác bởi người dùng hoặc bởi một Database program.</p>\r\n<p>Một transaction là một sự lan truyền của một hoặc nhiều thay đổi tới Database. Ví dụ, nếu bạn đang tạo một bản ghi hoặc cập nhật một bản ghi hoặc xóa một bản ghi từ một bảng, thì bạn đang thực hiện transaction trên bảng đó. Nó là quan trọng để điều khiển các transaction để bảo đảm toàn vẹn dữ liệu và để xử lý các Database Error.</p>\r\n<p>Nói cách khác, một Transaction sẽ không bao giờ hoàn thành trừ khi mỗi hoạt động riêng bên trong nhóm được thực hiện thành công. Nếu bất kỳ hoạt động nào bên trong Transaction thất bại, thì toàn bộ Transaction đó sẽ thất bại.</p>\r\n<p>Thực tế, bạn sẽ gộp nhiều truy vấn SQL vào thành một nhóm và bạn sẽ thực thi tất cả chúng cùng với nhau như là một Transaction.</p>\r\n<h2>Property của Transaction trong MySQL</h2>\r\n<p>Transaction có 4 property chuẩn và thường được biết đến với tên lược danh là ACID:</p>\r\n<ul class=\"list\">\r\n<li><p><b>Atomicity:</b> bảo đảm rằng tất cả hoạt động bên trong đơn vị công việc được hoàn thành một cách thành công; nếu không, transaction bị ngừng ở điểm thất bại, và các hoạt động trước được trao trả về trạng thái trước đó.</p></li>\r\n<li><p><b>Consistency:</b> bảo đảm rằng Database thay đổi một cách chính xác trạng thái theo một transaction đã được ký thác thành công.</p></li>\r\n<li><p><b>Isolation:</b> cho các transaction khả năng hoạt động một cách độc lập và không liên quan đến nhau.</p></li>\r\n<li><p><b>Durability:</b> bảo đảm rằng kết quả hoặc tác động của một transaction, mà đã được ký thác, vẫn còn tồn tại trong trường hợp hệ thống thất bại.</p></li>\r\n</ul>\r\n<p>Trong MySQL, các Transaction bắt đầu với lệnh BEGIN WORK và kết thúc với hoặc một lệnh COMMIT hoặc lệnh ROLLBACK. Các lệnh SQL giữa các lệnh bắt đầu và kết thúc cấu tạo nên Transaction.</p><h2>Lệnh COMMIT và ROLLBACK trong MySQL</h2>\r\n<p>Hai từ khóa <b>Commit</b> và <b>Rollback</b> được sử dụng chủ yêu cho Transaction trong MySQL.</p>\r\n<ul class=\"list\">\r\n<li><p>Khi một Transaction được hoàn thành, lệnh COMMIT nên được thông báo để mà tất cả thay đổi tới các bảng liên quan sẽ có hiệu quả.</p></li>\r\n<li><p>Nếu một lỗi xuất hiện, một lệnh ROLLBACK nên được thông báo để trả bảng đã tham chiếu trong Transaction về trạng thái trước đó.</p></li>\r\n</ul>\r\n<p>Bạn có thể điều khiển cách vận hành của một Transaction bằng việc thiết lập biến session gọi là <b>AUTOCOMMIT</b>. Nếu AUTOCOMMIT được thiết lập là 1 (mặc định), thì mỗi lệnh SQL (bên trong một Transaction hoặc không) được xem như là một Transaction đã kết thúc và được ký thác theo mặc định khi nó kết thúc. Khi AUTOCOMMIT được thiết lập là 0, thì bằng việc thông báo lệnh SET AUTOCOMMIT=0, các chuỗi lệnh theo sau hoạt động như một Transaction và không có hoạt động nào được ký thác tới khi một lệnh COMMIT tường minh được thông báo.</p>\r\n\r\n<h2>Ví dụ chung về Transaction trong MySQL</h2>\r\n<p>Dãy sự kiện là độc lập với ngôn ngữ chương trình được sử dụng; logic path có thể được tạo trong bất kỳ ngôn ngữ nào bạn sử dụng để tạo ứng dụng của mình.</p>\r\n<p>Bạn có thể thực thi các lệnh SQL trong PHP bởi sử dụng hàm <b>mysql_query()</b>.</p>\r\n<ul class=\"list\">\r\n<li><p>Bắt đầu Transaction bằng việc thông báo lệnh <b>BEGIN WORK.</b></p></li>\r\n<li><p>Thông báo một hay nhiều lệnh SQL như SELECT, INSERT, UPDATE hoặc DELETE.</p></li>\r\n<li><p>Kiểm tra xem có lỗi nào hay không và mọi thứ có theo như yêu cầu của bạn không.</p></li>\r\n<li><p>Nếu có bất kỳ lỗi nào, thì bạn thông báo lệnh ROLLBACK, nếu không có, bạn thông báo một lệnh COMMIT.</p></li>\r\n</ul><h2>Các loại bảng bảo vệ Transaction trong MySQL</h2>\r\n<p>Bạn không thể sử dụng các Transaction một cách trực tiếp, bởi vì chúng không an toàn và không được bảo vệ. Nếu bạn muốn sử dụng các Transaction trong lập trình MySQL, thì bạn cần tạo các bảng theo một cách đặc biệt. Có nhiều loại bảng hỗ trợ cho các Transaction nhưng loại phổ biến nhất là <b>InnoDB</b>.</p>\r\n<p>Sự hỗ trợ cho các bảng InnoDB yêu cầu một tham số biên dịch cụ thể khi biên dịch MySQL từ nguồn. Nếu phiên bản MySQL của bạn không có hỗ trợ cho InnoDB, bạn yêu cầu nhà cung cấp dịch vụ Internet để xây dựng một phiên bản MySQL với sự hỗ trợ cho loại bảng InnoDB hoặc tải và cài đặt MySQL-Max Binary Distribution cho Windows hoặc Linux/UNIX và làm việc với loại bảng này trong môi trường phát triển.</p>\r\n<p>Nếu cài đặt MySQL của bạn hỗ trợ các bảng InnoDB, bạn chỉ cần đơn giản thêm định nghĩa <b>TYPE=InnoDB</b> ở phần lệnh tạo bảng. Ví dụ sau tạo một bảng InnoDB gọi là sinhvienk60:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//Lua chon co so du lieu\r\nUSE sinhvien;\r\n//Tao bang sinhvienk60\r\n\r\nCREATE TABLE sinhvienk60 (\r\n   ten VARCHAR(40) NOT NULL,\r\n   diemthi  INT\r\n) <b>TYPE=InnoDB</b>;\r\n</pre>\r\n \r\n<p>Bạn có thể sử dụng các loại bảng khác như <b>GEMINI</b> hoặc <b>BDB</b>, tùy thuộc vào cài đặt của bạn có hỗ trợ các loại bảng này không.</p>\r\n\r\n',2),(24,'Lệnh Alter','<h1>Lệnh ALTER trong MySQL</h1><p>Lệnh <b>ALTER</b> trong MySQL là thực sự hữu ích khi bạn muốn thay tên cho một bảng, cho bất kỳ trường nào hoặc nếu bạn muốn thêm hoặc xóa một cột đang tồn tại trong một bảng.</p>\r\n<p>Đầu tiên, tạo một bảng hocphik61:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//Lua chon co so du lieu\r\nUSE sinhvien;\r\n//Tao bang hocphik61\r\n\r\nCREATE TABLE hocphik61 (\r\n   ten VARCHAR(40),\r\n   hocphi  INT\r\n);\r\n\r\n//Hien thi tat ca cac cot trong bang hocphik61\r\nSHOW COLUMNS FROM hocphik61;\r\n//ket qua la:\r\n+---------+-------------+------+-----+---------+-------+\r\n| Field   | Type        | Null | Key | Default | Extra |\r\n+---------+-------------+------+-----+---------+-------+\r\n| ten     | varchar(40) | YES  |     | NULL    |       |\r\n| hocphi  | int(11)     | YES  |     | NULL    |       |\r\n+---------+-------------+------+-----+---------+-------+\r\n</pre><h2>Xóa, thêm hoặc tái định vị một cột trong MySQL</h2>\r\n<p>Giả sử bạn muốn xóa một cột đang tồn tại <i>ten</i> từ bảng MySQL trên, thì bạn sử dụng mệnh đề DROP cùng với lệnh <b>ALTER</b> như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61  DROP ten;\r\n</pre>\r\n<p>Một lệnh <b>DROP</b> sẽ không làm việc nếu cột chỉ nằm ở bên trái của bảng.</p>\r\n<p>Để thêm một cột, sử dụng ADD và xác định định nghĩa cột. Lệnh sau phục hồi cột <b>ten</b> cho bảng hocphik61:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 ADD ten VARCHAR(40);\r\n</pre>\r\n<p>Sau khi thông báo lệnh này, bảng hocphik61 sẽ chứa cùng hai cột như nó đã chứa khi bạn lần đầu tạo bảng đó, nhưng sẽ không có cùng cấu trúc. Đó là bởi vì các cột mới được thêm vào phần cuối bảng theo mặc định. Vì thế, ngay cả khi lúc ban đầu cột <b>ten</b> là cột đầu tiên trong bảng hocphik61, thì bây giờ nó là cột cuối cùng. </p>\r\n<pre class=\"prettyprint notranslate\">\r\nSHOW COLUMNS FROM hocphik61;\r\n+---------+-------------+------+-----+---------+-------+\r\n| Field   | Type        | Null | Key | Default | Extra |\r\n+---------+-------------+------+-----+---------+-------+\r\n| hocphi  | int(11)     | YES  |     | NULL    |       |\r\n| ten     | varchar(40) | YES  |     | NULL    |       |\r\n+---------+-------------+------+-----+---------+-------+\r\n</pre>\r\n<p>Để chỉ rằng bạn muốn một cột tại một vị trí cụ thể bên trong một bảng, hoặc sử dụng <b>FIRST</b> để làm nó trở thành cột đầu tiên hoặc <b>AFTER ten_cot</b> để chỉ rằng cột mới nên được đặt sau cột ten_cot. Bạn thử các lệnh ALTER TABLE sau, sử dụng SHOW COLUMNS sau mỗi lệnh để xem hiệu quả của mỗi lệnh đó:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 DROP ten;\r\nALTER TABLE hocphik61 ADD ten VARCHAR(40) FIRST; //them cot <b>ten</b> thanh cot dau tien\r\nALTER TABLE hocphik61 DROP ten;\r\nALTER TABLE hocphik61 ADD ten VARCHAR(40) AFTER hocphi; //them cot <b>ten</b> sau cot <b>hocphi</b>\r\n</pre>\r\n<p>FIRST và AFTER specifier chỉ làm việc với mệnh đề ADD. Điều này nghĩa là nếu bạn muốn tái định vị một cột đang tồn tại bên trong một bảng, đầu tiên bạn phải DROP nó và sau đó ADD nó tại vị trí mới.</p>\r\n<h2>Thay đổi một định nghĩa hoặc tên cột trong MySQL</h2>\r\n<p>Để thay đổi một định nghĩa cột, sử dụng mệnh đề <b>MODIFY</b> hoặc <b>CHANGE</b> cùng với lệnh ALTER. Ví dụ, để thay đổi cột <i>ten</i> từ <b>VARCHAR(40)</b> thành <b>VARCHAR(20)</b>, bạn sử dụng:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 MODIFY ten VARCHAR(20);\r\n</pre>\r\n<p>Với CHANGE, cú pháp có hơi chút khác biệt. Sau từ khóa CHANGE, bạn xác định cột bạn muốn thay đổi, sau đó xác định định nghĩa mới, bao gồm tên mới của nó. Bạn xem ví dụ:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 CHANGE ten hoten VARCHAR(60);\r\n</pre>\r\n<p>Nếu bây giờ bạn sử dụng CHANGE để chuyển đổi hoten từ VARCHAR(60) về VARCHAR(40) mà không thay đổi tên cột, lệnh sẽ là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 CHANGE hoten hoten VARCHAR(40);\r\n</pre>\r\n<h2>Tác động của ALTER TABLE trên các giá trị NULL và DEFAULT</h2>\r\n<p>Khi bạn MODIFY hoặc CHANGE một cột, bạn cũng có thể xác định có hay không cột đó có thể chứa các giá trị NULL và giá trị DEFAULT của nó là gì. Thực tế, nếu bạn không làm điều này, MySQL sẽ tự động gán các giá trị cho các thuộc tính này.</p>\r\n<p>Trong ví dụ sau, cột NOT NULL sẽ có giá trị mặc định là 4000000.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 \r\n    MODIFY hocphi BIGINT NOT NULL DEFAULT 4000000;\r\n</pre>\r\n<p>Nếu bạn không sử dụng lệnh trên, thì MySQL sẽ điền các giá trị NULL vào tất cả các cột.</p>\r\n<h2>Thay đổi giá trị DEFAULT của một cột trong MySQL</h2>\r\n<p>Bạn có thể thay đổi một giá trị mặc định cho bất kỳ cột nào bởi sử dụng lệnh ALTER. Bạn thử ví dụ sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 ALTER hocphi SET DEFAULT 3000000;\r\n\r\n//hien thi cac cot\r\nSHOW COLUMNS FROM hocphik61;\r\n\r\n//ket qua la:\r\n+---------+-------------+------+-----+---------+-------+\r\n| Field   | Type        | Null | Key | Default | Extra |\r\n+---------+-------------+------+-----+---------+-------+\r\n| ten     | varchar(40) | YES  |     | NULL    |       |\r\n| hocphi  | int(11)     | YES  |     | 3000000 |       |\r\n+---------+-------------+------+-----+---------+-------+\r\n</pre>\r\n<p>Bạn có thể xóa ràng buộc DEFAULT từ bất kỳ cột nào bởi sử dụng mệnh đề DROP cùng với lệnh ALTER.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 ALTER hocphi DROP DEFAULT;\r\n\r\n//hien thi cac cot\r\nSHOW COLUMNS FROM hocphik61;\r\n\r\n//ket qua la:\r\n+---------+-------------+------+-----+---------+-------+\r\n| Field   | Type        | Null | Key | Default | Extra |\r\n+---------+-------------+------+-----+---------+-------+\r\n| ten     | varchar(40) | YES  |     | NULL    |       |\r\n| hocphi  | int(11)     | YES  |     | NULL    |       |\r\n+---------+-------------+------+-----+---------+-------+\r\n</pre>\r\n<h2>Thay đổi một kiểu bảng trong MySQL</h2>\r\n<p>Bạn có thể thay đổi một kiểu bảng bởi sử dụng <b>TYPE</b> cùng với lệnh ALTER. Bạn xem ví dụ sau để thay đổi hocphik61 thành kiểu bảng <b>MyISAM</b>.</p>\r\n<p>Để tìm kiểu bảng hiện tại, sử dụng lệnh SHOW TABLE STATUS.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 ENGINE = MyISAM;\r\n</pre>\r\n<p>Để tìm kiểu bảng hiện tại, sử dụng lệnh SHOW TABLE STATUS.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSHOW TABLE STATUS LIKE \'hocphik61\'\r\n</pre>\r\n<p>Kết quả giống như sau:</p>\r\n<img src=\"../mysql/images/lenh_alter_trong_mysql.PNG\" alt=\"Lệnh ALTER trong MySQL-PHP\" />\r\n\r\n<h2>Thay tên cho bảng trong MySQL</h2>\r\n<p>Để thay tên cho một bảng, sử dụng tùy chọn <b>RENAME</b> của lệnh ALTER TABLE. Bạn xem ví dụ sau để đổi tên hocphik61 thành hocphik62.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE hocphik61 RENAME TO hocphik62;\r\n</pre>\r\n<p>Bạn có thể sử dụng lệnh ALTER để tạo và xóa INDEX trên một MySQL file. Chúng ta sẽ xem tính năng này trong chương sau.</p>\r\n',2),(25,'Chỉ mục (Index)','<h1>Chỉ mục (INDEX) trong MySQL</h1><p>Một cơ sở dữ liệu với chỉ mục là một cấu trúc dữ liệu mà cải thiện tốc độ của các hoạt động trong một bảng. Các chỉ mục có thể được tạo bởi sử dụng một hoặc nhiều cột, cung cấp cơ sở cho việc tăng nhanh quá trình tìm kiếm ngẫu nhiên và sắp xếp thứ tự truy cập tới các bản ghi một cách hiệu quả.</p>\r\n<p>Trong khi tạo chỉ mục, bạn nên cân nhắc xem cột nào sẽ được sử dụng để tạo các truy vấn SQL và tạo một hoặc nhiều chỉ mục trên các cột đó.</p>\r\n<p>Thực tế, các chỉ mục cũng là kiểu của bảng, mà giữ trường Primary Key hoặc trường index và một con trỏ tới mỗi bản ghi bên trong bảng thực sự.</p>\r\n<p>Người sử dụng không thể thấy các chỉ mục này, chúng chỉ được sử dụng để tăng tốc các truy vấn và sẽ được sử dụng bởi Database Search Engine để định vị các bản ghi một cách cực kỳ nhanh.</p> \r\n<p>Các lệnh INSERT và UPDATE tốn nhiều thời gian hơn trên các bảng có chỉ mục trong khi các lệnh SELECT trở nên nhanh hơn trên các bảng này. Lý do là vì, trong khi chèn và cập nhật, cơ sở dữ liệu cũng phải cần chèn hoặc cập nhật các giá trị chỉ mục.</p><h2>Simple Index và Unique Index trong MySQL</h2>\r\n<p>Bạn có thể tạo một Unique Index trên một bảng. Một Unique Index nghĩa là hai hàng không thể có cùng giá trị chỉ mục. Dưới đây là cú pháp để tạo một chỉ mục trên một bảng.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE UNIQUE INDEX ten_chi_muc\r\nON ten_bang ( cot1, cot2,...);\r\n</pre>\r\n<p>Bạn có thể sử dụng một hoặc nhiều cột để tạo một chỉ mục. Ví dụ, chúng ta có thể tạo chỉ mục trên cột <b>ten</b> trong bảng sinhvienk60 như sau: </p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE UNIQUE INDEX tenchimuc\r\nON sinhvienk60 (ten)\r\n</pre>\r\n<p>Bạn có thể tạo một Simple Index trên một bảng. Đơn giản, bạn chỉ cần bỏ qua từ khóa UNIQUE từ truy vấn để tạo Simple Index. Simple Index cho phép tồn tại bản sao các giá trị trong một bảng.</p>\r\n<p>Nếu bạn muốn lập chỉ mục các giá trị trong một cột theo thứ tự giảm dần, bạn có thể thêm từ DESC sau tên cột.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE UNIQUE INDEX tenchimuc\r\nON sinhvienk60 (ten DESC)\r\n</pre><h2>Lệnh ALTER để thêm và xóa INDEX trong MySQL</h2>\r\n<p>Có 4 kiểu lệnh để thêm các chỉ mục cho một bảng:</p>\r\n<ul class=\"list\">\r\n<li><p><b>ALTER TABLE ten_bang ADD PRIMARY KEY (danh_sach_cot):</b> Lệnh này thêm một PRIMARY KEY, nghĩa là các giá trị được lập chỉ mục phải là duy nhất và không thể là NULL.</p></li>\r\n<li><p><b>ALTER TABLE ten_bang ADD UNIQUE ten_chi_muc (danh_sach_cot):</b> Lệnh này tạo một chỉ mục cho các giá trị để giá trị đó phải là duy nhất (với giá trị NULL là ngoại lệ, chúng có thể xuất hiện nhiều lần).</p></li>\r\n<li><p><b>ALTER TABLE ten_bang ADD INDEX ten_chi_muc (danh_sach_cot):</b> Lệnh này thêm một chỉ mục thông thường, trong đó bất kỳ giá trị nào có thể xuất hiện nhiều hơn một lần.</p></li>\r\n<li><p><b>ALTER TABLE ten_bang ADD FULLTEXT ten_chi_muc (danh_sach_cot):</b> Lệnh này tạo một chỉ mục FULLTEXT đặc biệt, được sử dụng cho mục đích tìm kiếm văn bản.</p></li>\r\n</ul>\r\n<p>Ví dụ sau để thêm chỉ mục cho cột <b>ho</b> trong bảng sinhvienk59 đang tồn tại.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE sinhvienk59 ADD INDEX (ho);\r\n</pre>\r\n<p>Bạn có thể <b>xóa</b> bất kỳ INDEX nào bởi sử dụng mệnh đề DROP cùng với lệnh ALTER. Bạn xét ví dụ sau để xóa chỉ mục đã được tạo ở trên.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE sinhvienk59 DROP INDEX (ho);\r\n</pre>\r\n \r\n<h2>Lệnh ALTER để thêm và xóa PRIMARY KEY</h2>\r\n<p>Bạn cũng có thể thêm Primary Key theo cách tương tự. Nhưng đảm bảo rằng Primary Key làm việc trên các cột mà là NOT NULL.</p>\r\n<p>Ví dụ sau để thêm Primary Key vào một bảng đang tồn tại. Đầu tiên, tạo cột là NOT NULL và sau đó thêm cho nó một Primary Key.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE sinhvienk59 MODIFY diemthi INT NOT NULL;\r\nALTER TABLE sinhvienk59 ADD PRIMARY KEY (diemthi);\r\n</pre>\r\n<p>Bạn có thể sử dụng lệnh ALTER để <b>xóa </b>một Primary Key như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER TABLE sinhvienk59 DROP PRIMARY KEY;\r\n</pre>\r\n<p>Để xóa một chỉ mục mà không là một PRIMARY KEY, bạn <b>phải xác định tên chỉ mục</b>.</p>\r\n<h2>Hiển thị thông tin chỉ mục trong MySQL</h2>\r\n<p>Bạn sử dụng lệnh SHOW INDEX để liệt kê tất cả chỉ mục được liên kết với một bảng. Kết quả trong định dạng dọc (được xác định bởi \\G) thường là có ích hơn với lệnh này, để tránh một dòng liệt kê dài.</p>\r\n<p>Bạn thử ví dụ sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSHOW INDEX FROM <i>ten_bang</i>\\G\r\n........\r\n</pre>',2),(26,'Bảng tạm (Temporary Table)','<h1>Bảng tạm trong MySQL</h1><p>Các bảng tạm (Temporary Table) tỏ ra rất có ích trong một số trường hợp cần lưu giữ các dữ liệu tạm thời. Điều quan trọng nhất bạn cần biết về các bảng tạm là chúng sẽ bị xóa khi phiên (session) hiện tại trên Client kết thúc.</p>\r\n<p>Các bảng tạm được bổ sung trong phiên bản MySQL 3.23. Nếu bạn sử dụng phiên bản MySQL cũ hơn, thì bạn không thể sử dụng các bảng này, tuy nhiên, bạn có thể sử dụng các Heap Table.</p>\r\n<p>Các bảng tạm sẽ chỉ tồn tại khi session còn sống. Nếu bạn chạy code trong một PHP Script, thì bảng tạm sẽ tự động bị hủy khi Script kết thúc việc thực thi. Nếu bạn kết nối với MySQL Database Server thông qua chương trình MySQL Client, thì bảng tạm sẽ tồn tại tới khi bạn đóng Client hoặc thao tác hủy bảng.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Ví dụ sau tạo một bảng tạm có tên <b>bangdiemk60</b> trong cơ sở dữ liệu <i>sinhvien</i>. Code này cũng có thể được sử dụng trong PHP Script bởi sử dụng hàm <b>mysql_query()</b>.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//Chon co so du lieu\r\nUSE sinhvien;\r\n\r\n//Tao bang tam bangdiemk60\r\nCREATE TEMPORARY TABLE bangdiemk60 (\r\nho VARCHAR(50) NOT NULL,\r\nten VARCHAR(20) NOT NULL,\r\ndiemgk FLOAT(4,2) NOT NULL DEFAULT 0.00,\r\ndiemck FLOAT(4,2) NOT NULL DEFAULT 0.00\r\n);\r\n\r\n//Chen du lieu vao bang\r\nINSERT INTO bangdiemk60 (ho, ten, diemgk, diemck)\r\nVALUES (\'Tran Minh\', \'Chinh\', 8, 9);\r\n\r\n//hien thi du lieu cua bang\r\nSELECT * FROM bangdiemk60;\r\n+--------------+-------+---------+--------+\r\n| ho           | ten   | diemgk  | diemck |\r\n+--------------+-------+---------+--------+\r\n| Tran Minh    | Chinh |  8.00   |  9.00  |\r\n+--------------+-------+---------+--------+\r\n</pre>\r\n<p>Khi bạn thông báo một lệnh <b>SHOW TABLES</b>, thì bảng tạm của bạn sẽ không được liệt kê trong kết quả. Bây giờ, nếu bạn đăng xuất MySQL session và sau đó bạn sẽ thông báo một lệnh SELECT, thì bạn sẽ không thấy dữ liệu nào có sẵn trong cơ sở dữ liệu. </p>\r\n<h2>Xóa bảng tạm trong MySQL</h2>\r\n<p>Theo mặc định, tất cả bảng tạm bị xóa bởi MySQL khi kết nối tới cơ sở dữ liệu bị ngắt. Tuy nhiên, nếu bạn vẫn muốn xóa chúng, thì bạn có thể làm điều này bởi thông báo lệnh DROP TABLE.</p>\r\n<p>Ví dụ sau sẽ xóa một bảng tạm trong MySQL:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nDROP TABLE bangdiemk60;\r\n\r\n//Bay gio, neu ban su dung lenh SELECT\r\nSELECT * FROM bangdiemk60;\r\n//thi no se cho mot loi nhu sau\r\nError Code: 1146. Table \'sinhvien.bangdiemk60\' doesn\'t exist\r\n</pre>',2),(27,'Mô phỏng bảng','<h1>Mô phỏng bảng trong MySQL</h1><p>Có một tình huống khi bạn cần một bản sao thực sự của một bảng và các lệnh CREATE TABLE … SELECT … không phù hợp với mục đích của bạn, bởi vì bản sao phải bao gồm cùng chỉ mục, cùng giá trị mặc định, và …</p>\r\n<p>Bạn có thể xử lý tình huống này theo các bước sau:</p>\r\n<ul class=\"list\">\r\n<li><p>Sử dụng lệnh SHOW CREATE TABLE  để lấy một lệnh CREATE TABLE mà xác định cấu trúc, chỉ mục và tất cả thông tin của bảng nguồn.</p></li>\r\n<li><p>Sửa đổi lệnh để thay đổi tên bảng thành tên một bảng mô phỏng và thực thi lệnh. Theo cách này, bạn sẽ có bảng mô phỏng thực sự.</p></li>\r\n<li><p>Tùy ý, nếu bạn cần sao các nội dung bảng, bạn thông báo một lệnh INSERT INTO … SELECT.</p></li>\r\n</ul>\r\n<h2>Ví dụ</h2>\r\n<p>Bạn thử ví dụ sau để tạo một bảng mô phỏng cho sinhvienk60:</p>\r\n<h2>Bước 1: </h2> <p>Lấy toàn bộ cấu trúc của bảng với lệnh <b>SHOW CREATE TABLE ten_bang;</b>:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSHOW CREATE TABLE sinhvienk60;\r\n</pre>\r\n<p>Khi bạn đang làm việc trên MySQL Workbench thì lệnh trên sẽ trả về một hàng, bạn có thể nhấn chuột phải vào hàng này và lựa chọn các tùy chọn <i>Copy</i>, sau đó dán vào phần bạn đang làm việc, kết quả là:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE TABLE `sinhvienk60` (\r\n  `mssv` int(11) NOT NULL AUTO_INCREMENT,\r\n  `ho` varchar(255) NOT NULL,\r\n  `ten` varchar(255) NOT NULL,\r\n  `diemthi` float(4,2) NOT NULL,\r\n  PRIMARY KEY (`mssv`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8\r\n</pre><h2>Bước 2: </h2> <p>Thay tên bảng này và tạo bảng khác.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE TABLE `sinhvienk61` (\r\n  `mssv` int(11) NOT NULL AUTO_INCREMENT,\r\n  `ho` varchar(255) NOT NULL,\r\n  `ten` varchar(255) NOT NULL,\r\n  `diemthi` float(4,2) NOT NULL,\r\n  PRIMARY KEY (`mssv`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8\r\n</pre>\r\n<h2>Bước 3:</h2> <p>Sau khi thực thi bước 2, bạn sẽ mô phỏng một bảng trong Database. Nếu bạn muốn sao chép dữ liệu từ bảng cũ, thì bạn có thể thực hiện bằng việc sử dụng lệnh INSERT INTO … SELECT.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nINSERT INTO <b>sinhvienk61</b> (mssv, ho, ten, diemthi)\r\n      SELECT mssv, ho, ten, diemthi FROM <b>sinhvienk60</b>;\r\n</pre>\r\n<p>Cuối cùng, bạn sẽ có bảng mô phỏng thực sự như bạn muốn có.</p>',2),(28,'Thông tin Database','<h1>Lấy và sử dụng MySQL Metadata</h1><p>Có 3 thông tin mà bạn muốn có từ MySQL:</p>\r\n<ul class=\"list\">\r\n<li><p><b>Thông tin về kết quả của các truy vấn</b>: Bao gồm số bản ghi bị tác động bởi bất kỳ lệnh SELECT, UPDATE, DELETE nào.</p></li>\r\n<li><p><b>Thông tin về các bảng và cơ sở dữ liệu:</b> Bao gồm thông tin liên quan tới cấu trúc bảng và cấu trúc cơ sở dữ liệu.</p></li>\r\n<li><p><b>Thông tin về MySQL Server:</b> Bao gồm trạng thái hiện tại của Database Server, phiên bản, …</p></li>\r\n</ul>\r\n<p>Thực sự dễ dàng để lấy tất cả thông tin tại dòng nhắc lệnh mysql, nhưng trong khi sử dụng PERL hoặc PHP APIs, chúng ta cần gọi các APIs đa dạng để lấy tất cả thông tin này. </p>\r\n<h2>Lấy số hàng bị tác động bởi một Truy vấn trong MySQL</h2>\r\n<p>Trong PHP, gọi hàm <b>mysql_affected_rows()</b> để tìm xem có bao nhiêu hàng bị ảnh hưởng bởi một truy vấn:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$result_id = mysql_query ($query, $conn_id);\r\n# report 0 rows if the query failed\r\n$count = ($result_id ? mysql_affected_rows ($conn_id) : 0);\r\nprint (\"$count rows were affected\\n\");\r\n</pre>\r\n<h2>Liệt kê các bảng và cơ sở dữ liệu trong MySQL</h2>\r\n<p>Việc liệt kê các bảng và cơ sở dữ liệu có sẵn với Database Server là khá đơn giản. Kết quả của bạn có thể là NULL nếu bạn không được trao đủ quyền.</p>\r\n<p>Ngoài phương thức đã liệt kê ở trên, bạn có thể sử dụng các truy vấn SHOW TABLES hoặc SHOW DATABASES để lấy danh sách các bảng hoặc cơ sở dữ liệu trong PHP.</p><h2>Ví dụ</h2>\r\n<pre class=\"prettyprint notranslate\">\r\n<?php\r\n$con = mysql_connect(\"localhost\", \"userid\", \"password\");\r\nif (!$con)\r\n{\r\n  die(\'Khong the ket noi: \' . mysql_error());\r\n}\r\n\r\n$db_list = mysql_list_dbs($con);\r\n\r\nwhile ($db = mysql_fetch_object($db_list))\r\n{\r\n  echo $db->Database . \"<br />\";\r\n}\r\nmysql_close($con);\r\n?>\r\n</pre>\r\n<h2>Lấy Server Metadata trong MySQL</h2>\r\n<p>Các lệnh sau trong MySQL có thể được thực thi hoặc tại dòng nhắc mysql hoặc bởi sử dụng bất kỳ script nào như PHP để lấy các thông tin quan trọng về Database Server.</p>\r\n<table class=\"table table-bordered\">\r\n<tr><th>Lệnh</th><th>Miêu tả</th></tr>\r\n<tr><td>SELECT VERSION( )</td><td>Phiên bản Server (dạng chuỗi)</td></tr>\r\n<tr><td>SELECT DATABASE( )</td><td>Tên cơ sở dữ liệu hiện tại (là trống nếu không có)</td></tr>\r\n<tr><td>SELECT USER( )</td><td>Username hiện tại</td></tr>\r\n<tr><td>SHOW STATUS</td><td>Trạng thái Server</td></tr>\r\n<tr><td>SHOW VARIABLES</td><td>Các biến cấu hình Server</td></tr>\r\n</table>',2),(29,'Sử dụng Sequence','<h1>Sử dụng Sequence trong MySQL</h1><p>Một Sequence là một tập hợp các số nguyên 1, 2, 3, … mà được tạo theo nhu cầu. Các Sequence thường xuyên được sử dụng trong Database bởi vì nhiều ứng dụng yêu cầu mỗi hàng trong bảng chứa một giá trị duy nhất, và các Sequence cung cấp một cách dễ dàng để tạo chúng. Chương này trình bày cách sử dụng của Sequence trong MySQL.</p>\r\n<h2>Sử dụng AUTO_INCREMENT column</h2>\r\n<p>Cách đơn giản nhất trong MySQL để sử dụng các Sequence là để định nghĩa một cột dạng AUTO_INCREMENT và để phần còn lại cho MySQL xử lý.</p>\r\n<h2>Ví dụ</h2>\r\n<p>Bạn trở lại theo dõi chương <b>Tạo bảng và Truy vấn Insert</b>. Tại đây, trong quá trình tạo bảng, mình đã định nghĩa cột <b>mssv</b> dạng AUTO_INCREMENT, và sau đó khi chèn dữ liệu bạn không bắt buộc cung cấp bản ghi mssv bởi vì nó được tự động được tăng bởi MySQL.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//Tao bang sinhvienk60\r\nCREATE TABLE sinhvienk60 (\r\nmssv INT NOT NULL AUTO_INCREMENT,\r\nho VARCHAR(255) NOT NULL,\r\nten VARCHAR(255) NOT NULL,\r\ntuoi INT NOT NULL,\r\ndiemthi FLOAT(4,2) NOT NULL,\r\nPRIMARY KEY (mssv)\r\n);\r\n\r\n//Chen du lieu vao bang\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Dinh Van\", \"Cao\", 8);\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Nguyen Van\", \"Thanh\", 9);\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Nguyen Hoang\", \"Manh\", 7.5);\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Tran Van\", \"Nam\", 10);\r\n</pre><p>Và kết quả là:</p><pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Cao        | 8.00    |\r\n|   2  | Nguyen Van     | Thanh      | 9.00    |\r\n|   3  | Nguyen Hoang   | Huong      | 7.50    |\r\n|   4  | Tran Van       | Nam	     | 10.0    |\r\n+------+----------------+------------+---------+\r\n</pre><h2>Lấy các giá trị AUTO_INCREMENT </h2>\r\n<p>Hàm LAST_INSERT_ID() là một hàm SQL, vì thế, bạn có thể sử dụng nó từ bên trong bất kỳ Client nào mà hiểu cách thông báo lệnh SQL. </p>\r\n<p>PHP Script cung cấp hàm riêng để lấy giá trị AUTO_INCREMENT của bản ghi cuối. Sau khi thông báo một truy vấn mà tạo một giá trị AUTO_INCREMENT, lấy giá trị này bằng cách gọi hàm<b> mysql_insert_id()</b>:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql_query (\"INSERT INTO sinhvienk60 (ho,ten,diemthi)\r\nVALUES(\'Nguyen Van\',\'Thanh\',\'9\')\", $conn_id);\r\n$seq = mysql_insert_id ($conn_id);\r\n</pre>\r\n<h2>Đánh số lại một Sequence đang tồn tại </h2>\r\n<p>Có một tình huống khi bạn đã <b>xóa nhiều bản ghi</b> từ một bảng và bạn muốn đánh số lại tất cả các bản ghi. Điều này được thực hiện bởi sử dụng một mẹo đơn giản, nhưng bạn nên cẩn thận khi thực hiện nếu trong trường hợp bảng của bạn đang kết hợp với bảng khác.</p>\r\n<p>Nếu bạn quyết định rằng việc đánh số lại một cột AUTO_INCREMENT là không thể tránh khỏi, thì cách để thực hiện là xóa cột từ bảng, sau đó thêm lại. Ví dụ sau minh họa cách đánh số lại các giá trị id trong bảng INSECT bởi sử dụng kỹ thuật này.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//Dau tien, ban xoa cot\r\nALTER TABLE sinhvienk60 DROP mssv;\r\n\r\n//Sau do, them lai cot do\r\nALTER TABLE sinhvienk60\r\n    ADD mssv INT NOT NULL AUTO_INCREMENT,\r\n    ADD PRIMARY KEY (mssv);\r\n</pre>\r\n<h2>Bắt đầu một Sequence tại một giá trị cụ thể</h2>\r\n<p>Theo mặc định, MySQL sẽ bắt đầu Sequence từ 1, nhưng bạn có thể xác định bất kỳ số nào khác bạn muốn tại thời điểm tạo bảng. Ví dụ sau sẽ bắt đầu Sequence từ 10.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//Tao bang sinhvienk60 voi mssv bat dau tu 10\r\nCREATE TABLE sinhvienk60 (\r\nmssv INT NOT NULL AUTO_INCREMENT = 10,\r\nho VARCHAR(255) NOT NULL,\r\nten VARCHAR(255) NOT NULL,\r\ntuoi INT NOT NULL,\r\ndiemthi FLOAT(4,2) NOT NULL,\r\nPRIMARY KEY (mssv)\r\n);\r\n</pre>\r\n<p>Cách khác, bạn có thể tạo bảng và sau đó thiết lập giá trị khởi tạo cho Sequence với lệnh ALTER TABLE.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//Dau tien, ban tao bang\r\n//Sau do, thiet lap gia tri khoi tao cho sequence nhu sau:\r\nALTER TABLE ten_bang AUTO_INCREMENT = 100;\r\n</pre>',2),(30,'Xử lý bản sao','<h1>Xử lý bản sao trong MySQL</h1><p>Các bảng hoặc tập hợp kết quả đôi khi chứa bản sao các bản ghi. Đôi khi, nó được cho phép nhưng đôi khi nó là bắt buộc để ngăn chặn các bản sao này. Đôi khi, nó là bắt buộc để nhận diện các bản sao và xóa chúng khỏi bảng. Chương này miêu tả cách ngăn cản các bản sao dữ liệu xuất hiện trong một bảng và cách để gỡ bỏ chúng.</p>\r\n<h2>Ngăn cản bản sao xuất hiện trong một bảng</h2>\r\n<p>Bạn có thể sử dụng một <b>PRIMARY KEY</b> hoặc <b>UNIQUE</b> Index trên một bảng cho các trường thích hợp để ngăn cản sự xuất hiện của các bản sao. Ví dụ: bảng <i>nhanvienIT</i> sau không chứa chỉ mục dạng này, vì thế nó cho phép xuất hiện các bản sao cho <b>ho</b> và <b>ten</b>:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE TABLE nhanvienIT\r\n(\r\n    ho CHAR(20),\r\n    ten CHAR(20),\r\n    diachi CHAR(30)\r\n);\r\n</pre>\r\n<p>Để ngăn cản nhiều bản ghi với cùng giá trị họ và tên với các giá trị họ và tên đã được tạo trong bảng này, thêm một PRIMARY KEY vào định nghĩa của nó. Khi bạn làm điều này, cũng cần thiết phải khai báo các cột được lập chỉ mục là NOT NULL, bởi vì một PRIMARY KEY không cho phép các giá trị NOT NULL.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE TABLE nhanvienIT\r\n(\r\n   ho CHAR(20) NOT NULL,\r\n   ten CHAR(20) NOT NULL,\r\n   diachi CHAR(30),\r\n   PRIMARY KEY (ho, ten)\r\n);\r\n</pre>\r\n<p>Sự có mặt của một chỉ mục UNIQUE trong một bảng thường gây ra một lỗi nếu bạn chèn mọt bản ghi vào trong một bảng là bản sao của một bản ghi đang tồn tại trong cột hoặc các cột định nghĩa chỉ mục đó.</p>\r\n<p>Sử dụng <b>INSERT IGNORE</b> thay cho <b>INSERT</b>. Nếu một bản ghi không sao một bản ghi đang tồn tại, MySQL chèn nó như bình thường. Nếu bản ghi là một bản sao, từ khóa IGNORE nói cho MySQL để loại bỏ nó một cách lặng lẽ mà không cần tạo ra một lỗi.</p>\r\n<p>Ví dụ sau không tạo lỗi và cùng lúc đó nó sẽ không chèn bản sao các bản ghi.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql> INSERT IGNORE INTO nhanvienIT (ho, ten)\r\n    -> VALUES( \'Jay\', \'Thomas\');\r\nQuery OK, 1 row affected (0.00 sec)\r\nmysql> INSERT IGNORE INTO nhanvienIT (ho, ten)\r\n    -> VALUES( \'Jay\', \'Thomas\');\r\nQuery OK, 0 rows affected (0.00 sec)\r\n</pre>\r\n<p>Sử dụng <b>REPLACE</b> thay cho INSERT. Nếu bản ghi là mới, nó được chèn với lệnh INSERT. Nếu nó là bản sao, bản ghi mới sẽ thay thế cho bản ghi cũ.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql> REPLACE INTO nhanvienIT (ho, ten)\r\n    -> VALUES( \'Ajay\', \'Kumar\');\r\nQuery OK, 1 row affected (0.00 sec)\r\nmysql> REPLACE INTO nhanvienIT (ho, ten)\r\n    -> VALUES( \'Ajay\', \'Kumar\');\r\nQuery OK, 2 rows affected (0.00 sec)\r\n</pre>\r\n<p>Bạn nên chọn INSERT IGNORE và REPLACE theo cách xử lý bản sao bạn muốn. INSERT IGNORE giữ lại tập hợp bản sao bản ghi đầu tiên và loại bỏ phần còn lại. REPLACE giữ tập hợp bản sao cuối và xóa các phần trước.</p>\r\n<p>Cách khác để áp dụng tính duy nhất là thêm một chỉ mục UNIQUE thay vì một PRIMARY KEY cho một bảng.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE TABLE nhanvienIT\r\n(\r\n   ho CHAR(20) NOT NULL,\r\n   ten CHAR(20) NOT NULL,\r\n   diachi CHAR(30)\r\n   UNIQUE (ho, ten)\r\n);\r\n</pre>\r\n\r\n<h2>Đếm và xác định các bản sao trong MySQL</h2>\r\n<p>Ví dụ sau là truy vấn để đếm bản sao với ho và ten trong một bảng.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT COUNT(*) as sobansao, ho, ten\r\n    FROM nhanvienIT\r\n    GROUP BY ho, ten\r\n    HAVING sobansao > 1;\r\n</pre>\r\n<p>Truy vấn này sẽ trả về một danh sách tất cả bản sao trong bảng nhanvienIT. Nói chung, để xác định tập hợp các giá trị có bị sao hay không, bạn thực hiện:</p>\r\n<ul class=\"list\">\r\n<li><p>Xác định xem cột nào chứa các giá trị mà có thể bị sao.</p></li>\r\n<li><p>Liệt kê tất cả các cột đó, cùng với COUNT(*).</p></li>\r\n<li><p>Liệt kê các cột trong mệnh đề GROUP BY.</p></li>\r\n<li><p>Thêm một mệnh đề HAVING để loại bỏ các giá trị duy nhất bằng việc yêu cầu giá trị đếm nhóm lớn hơn 1.</p></li>\r\n</ul>\r\n<h2>Loại bỏ bản sao từ một kết quả truy vấn</h2>\r\n<p>Bạn có thể sử dụng <b>DISTINCT</b> cùng với lệnh SELECT để tìm các bản ghi duy nhất có trong một bảng.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT DISTINCT ho, ten\r\n    FROM nhanvienIT\r\n    ORDER BY ten;\r\n</pre>\r\n<p>Ngoài DISTINCT, bạn thêm một mệnh đề GROUP BY để xác định các cột bạn đang chọn. </p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT ho, ten\r\n    FROM nhanvienIT\r\n    GROUP BY (ho, ten);\r\n</pre>\r\n<h2>Xóa bản sao bởi sử dụng bảng thay thế</h2>\r\n<p>Nếu bạn có các bản sao trong một bảng và bạn muốn xóa tất cả bản sao từ bảng đó, thì dưới đây là thủ tục:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nCREATE TABLE nhanvienIT1 SELECT ho, ten, diachi\r\n                     FROM nhanvienIT;\r\n                     GROUP BY (ho, ten);\r\nDROP TABLE nhanvienIT;\r\nALTER TABLE nhanvienIT1 RENAME TO nhanvienIT;\r\n</pre>\r\n<p>Một cách dễ dàng để xóa các bản sao từ một bảng là thêm một INDEX hoặc PRIMARY KEY cho bảng đó. Ngay cả khi bảng này đã có sẵn, bạn có thể sử dụng kỹ thuật này để xóa các bản sao.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nALTER IGNORE TABLE nhanvienIT\r\n    ADD PRIMARY KEY (ho, ten);\r\n</pre>',2),(31,'SQL Injection','<h1>Injection trong MySQL và SQL</h1>\r\n<p>Nếu bạn nhận User Input thông qua một Webpage và chèn nó vào trong một SQL Database, thì tình cờ, bạn đã mở rộng cửa bảo mật ra bên ngoài, mà được biết đến với tên gọi là SQL Injection.</p>\r\n<p>Chương này sẽ hướng dẫn bạn cách ngăn cản tình huống này xảy ra và giúp bạn bảo vệ Script của bạn và các lệnh SQL trong Server-Side Script như PERL Script.</p>\r\n<p>Injection thường xảy ra khi bạn yêu cầu input từ một người dùng, như tên của họ, và thay vì cung cấp tên, họ cung cấp cho bạn một lệnh SQL mà bạn sẽ chạy trên Database của mình mà không hay biết.</p>\r\n<p>Đừng bao giờ tin vào dữ liệu được cung cấp bởi người dùng, xử lý dữ liệu này, và như một qui tắc, điều này được thực hiện bởi Pattern Matching (so khớp mẫu).</p>\r\n<p>Trong ví dụ dưới, name bị giới hạn là các ký tự chữ-số cộng với dấu gạch dưới và có độ dài từ 8 đến 20 ký tự (bạn có thể sửa đổi nếu thấy cần thiết).</p>\r\n<pre class=\"prettyprint notranslate\">\r\nif (preg_match(\"/^\\w{8,20}$/\", $_GET[\'username\'], $matches))\r\n{\r\n   $result = mysql_query(\"SELECT * FROM nhanvienIT \r\n                          WHERE username=$matches[0]\");\r\n}\r\n else \r\n{\r\n   echo \"Ten su dung khong duoc chap nhan\";\r\n}\r\n</pre>\r\n<p>Để minh họa vấn đề, bạn xem phần trích sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n// gia su co input nhu sau:\r\n$name = \"Thanh\'; DELETE FROM nhanvienIT;\";\r\nmysql_query(\"SELECT * FROM nhanvienIT WHERE name=\'{$name}\'\");\r\n</pre>\r\n<p>Lời gọi hàm được xem như để lấy một bản ghi từ bảng NHANVIEN, với cột name so khớp với name đã được xác định bởi người dùng. Thông thường, $name sẽ chỉ chứa các ký tự chữ-số và có thể có khoảng trống. Nhưng ở đây, bằng việc phụ thêm một truy vấn hoàn toàn mới tới $name, lời gọi tới Database sẽ gây ra vấn đề lớn: truy vấn DELETE bị tiêm vào sẽ xóa tất cả bản ghi từ bảng NHANVIEN.</p>\r\n<p>May mắn là, nếu bạn sử dụng MySQL, hàm mysql_query() không cho phép Query Stacking hoặc thực thi nhiều truy vấn SQL trong một lời gọi hàm đơn. Nếu bạn nỗ lực để thực hiện nhiều truy vấn, lời gọi hàm sẽ thất bại.</p>\r\n<p>Tuy nhiên, với PHP Database, ví dụ như SQLite và PostgreSQL, lại cho thực hiện nhiều truy vấn, thực thi tất cả truy vấn được cung cấp trong một chuỗi và điều này tạo ra một vấn đề rất nghiêm trọng.</p>\r\n<h2>Ngăn chặn SQL Injection</h2>\r\n<p>Bạn có thể xử lý tất cả Escape Character một cách khéo léo trong các ngôn ngữ Scripting như PERL và PHP. MySQL extension cho PHP cung cấp hàm mysql_real_escape_string() để tránh các ký tự được nhập vào mà có ý nghĩa đặc biệt với MySQL.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nif (get_magic_quotes_gpc()) \r\n{\r\n  $name = stripslashes($name);\r\n}\r\n$name = mysql_real_escape_string($name);\r\nmysql_query(\"SELECT * FROM nhanvienIT WHERE name=\'{$name}\'\");\r\n</pre>\r\n<h2>LIKE Quandary trong MySQL</h2>\r\n<p>Để định vị một LIKE Quandary, một kỹ thuật do người dùng tạo phải chuyển đổi các ký tự \'%\' và \'_\' do người dùng cung cấp thành literal (hằng). Sử dụng hàm addcslashes(), một hàm mà giúp bạn xác định một dãy ký tự để thoát.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$sub = addcslashes(mysql_real_escape_string(\"%something_\"), \"%_\");\r\n// $sub == \\%something\\_\r\nmysql_query(\"SELECT * FROM messages WHERE subject LIKE \'{$sub}%\'\");\r\n</pre>\r\n',2),(32,'Export và Sao lưu (Backup)','<h1>Export và Phương thức Backup trong MySQL</h1><p>Cách đơn giản nhất của việc truy xuất dữ liệu vào trong một text file là sử dụng lệnh SELECT…INTO OUTFILE mà xuất một kết quả truy vấn một cách trực tiếp vào trong file trên Server host.</p>\r\n<h2>Export với lệnh SELECT…INTO OUTFILE trong MySQL</h2>\r\n<p>Cú pháp của lệnh này là tổ hợp một lệnh SELECT thông thường với <b>INTO OUTFILE ten_file</b> ở cuối. Định dạng output mặc định là giống như LOAD DATA, vì thế lệnh sau sẽ xuất bảng sinhvienk60 vào trong /tmp/vietjack.txt.</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk60 \r\n    INTO OUTFILE \'/tmp/vietjack.txt\';\r\n</pre>\r\n<p>Bạn có thể thay đổi định dạng output bởi sử dụng các tùy chọn để chỉ cách trích dẫn và giới hạn các cột và các hàng. Để xuất bảng sinhvienk60 với định dạng CSV với các dòng CRLF, sử dụng lệnh:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM passwd INTO OUTFILE \'/tmp/vietjack.txt\'\r\n    FIELDS TERMINATED BY \',\' ENCLOSED BY \'\"\'\r\n    LINES TERMINATED BY \'\\r\\n\';\r\n</pre>\r\n<p>Lệnh <b>SELECT ... INTO OUTFILE</b> có các thuộc tính sau:</p>\r\n<ul class=\"list\">\r\n<li><p>Output file được tạo một cách trực tiếp bởi MySQL Server, vì thế ten_file nên chỉ ra nơi bạn xác định file đó để ghi dữ liệu trên Server host. Không có phiên bản LOCAL của lệnh như trong LOAD DATA.</p></li>\r\n<li><p>Bản phải được trao quyền MySQL FILE để thực thi lệnh SELECT…INTO.</p></li>\r\n<li><p>Output file phải là chưa tồn tại. Điều này giúp bạn ngăn cản MySQL từ việc ghi đè các file quan trọng.</p></li>\r\n<li><p>Bạn nên có một tài khoản đăng nhập trên Server host hoặc theo phương thức nào khác để lấy file từ host đó. Nếu không, lệnh SELECT…INTO OUTFILE sẽ không có giá trị với bạn.</p></li>\r\n<li><p>Với UNIX, file được tạo sẽ là có thể đọc bởi mọi người và được sở hữu bởi MySQL Server. Nghĩa là, mặc dù bạn có thể đọc được file đó, nhưng bạn không thể xóa nó.</p></li>\r\n</ul><h2>Xuất bảng dưới dạng dữ liệu thô</h2>\r\n<p>Chương trình <b>mysqldump</b> được sử dụng để sao hoặc backup các bảng hoặc cơ sở dữ liệu. Chương trình này có thể viết bảng output hoặc ở dạng file dữ liệu thô hoặc dưới dạng một tập hợp các lệnh INSERT mà tái tạo các bản ghi trong bảng.</p>\r\n<p>Để xuất một bảng dưới dạng file dữ liệu, bạn phải xác định một tùy chọn -- mà chỉ dẫn thư mục, nơi bạn muốn MySQL Server để ghi file đó.</p>\r\n<p>Ví dụ, để xuất bảng sinhvienk60 từ cơ sở dữ liệu sinhvien vào một file trong thư mục /tmp, sử dụng lệnh sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysqldump -u root -p --no-create-info \\\r\n            --tab=/tmp sinhvien sinhvienk60\r\npassword ******\r\n</pre>\r\n<h2>Xuất nội dung hoặc định nghĩa bảng trong định dạng SQL</h2>\r\n<p>Để xuất một bảng trong định dạng SQL vào một file, sử dụng lệnh giống như:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysqldump -u root -p sinhvien sinhvienk60 > dump.txt\r\npassword ******\r\n</pre>\r\n<p>Lệnh này sẽ tạo một file chứa nội dung như sau:</p>\r\n<hr />\r\n<pre class=\"prettyprint notranslate\">\r\n-- MySQL dump 8.23\r\n--\r\n-- Host: localhost    Database: sinhvien\r\n---------------------------------------------------------\r\n-- Server version       3.23.58\r\n\r\n--\r\n-- Table structure for table `sinhvienk60`\r\n--\r\n\r\nCREATE TABLE sinhvienk60 (\r\nmssv INT NOT NULL AUTO_INCREMENT,\r\nho VARCHAR(255) NOT NULL,\r\nten VARCHAR(255) NOT NULL,\r\ntuoi INT NOT NULL,\r\ndiemthi FLOAT(4,2) NOT NULL,\r\nPRIMARY KEY (mssv)\r\n) TYPE=MyISAM;\r\n\r\n--\r\n-- Dumping data for table `sinhvienk60`\r\n--\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Dinh Van\", \"Cao\", 8);\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Nguyen Van\", \"Thanh\", 9);\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Nguyen Hoang\", \"Manh\", 7.5);\r\n\r\nINSERT INTO sinhvienk60 (ho, ten, diemthi)\r\nVALUES (\"Tran Van\", \"Nam\", 10);\r\n</pre><p>Để xuất nhiều bảng, bạn xác định tất cả bảng đó sau tên cơ sở dữ liệu. Để xuất cả cơ sở dữ liệu, đừng xác định bất kỳ bảng nào sau cơ sở dữ liệu, như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysqldump -u root -p sinhvien > database_dump.txt\r\npassword ******\r\n</pre>\r\n<p>Để backup tất cả cơ sở dữ liệu có sẵn trên host của bạn, sử dụng lệnh sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysqldump -u root -p --all-databases > database_dump.txt\r\npassword ******\r\n</pre>\r\n<p>Tùy chọn --all--databases là có sẵn trong MySQL 3.23.12.</p>\r\n<p>Phương thức này có thể được sử dụng để triển khai một chiến lược sao lưu cơ sở dữ liệu.</p>\r\n<h2>Sao chép bảng hoặc cơ sở dữ liệu tới Host khác</h2>\r\n<p>Nếu bạn muốn sao chép các bảng hoặc cơ sở dữ liệu từ một MySQL Server tới Server khác, thì sử dụng mysqldump với tên cơ sở dữ liệu và tên bảng.</p>\r\n<p>Chạy lệnh sau tại source host. Lệnh này sẽ xuất toàn bộ cơ sở dữ liệu vào trong dump.txt file.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysqldump -u root -p ten_database ten_bang > dump.txt\r\npassword *****\r\n</pre>\r\n<p>Bạn có thể sao chép toàn bộ cơ sở dữ liệu mà không cần sử dụng một tên bảng cụ thể như giải thích trên.</p>\r\n<p>Bây giờ, dump.txt file trên host khác và sử dụng lệnh sau. Trước khi chạy lệnh, đảm bảo bạn có database_name đã được tạo trên Server đích.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysql -u root -p ten_database < dump.txt\r\npassword *****\r\n</pre>\r\n<p>Một cách khác để thực hiện việc này mà không sử dụng một file trung gian là gửi output của mysqldump một cách trực tiếp thông qua mạng tới MySQL Server từ xa. Nếu bạn có thể kết nối tới cả hai Server từ host đó, nơi đặt source database, sử dụng lệnh này (đảm bảo bạn có thể truy cập với cả hai Server đó):</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysqldump -u root -p ten_database \\\r\n       | mysql -h other-host.com ten_database\r\n</pre>',2),(33,'Import và Phục hồi (Recovery)','<h1>Import và phương thức Recovery trong MySQL</h1><p>Có hai cách đơn giản trong MySQL để tải dữ liệu vào trong MySQL Database từ một file đa được sao lưu trước đó.</p>\r\n<h2>Import với LOAD DATA</h2>\r\n<p>MySQL cung cấp một lệnh LOAD DATA mà hoạt động như một Bulk Data Loader. Ví dụ về lệnh sau sẽ đọc một file là dump.txt từ thư mục hiện tại của bạn và tải nó vào trong bảng sinhvienk60 trong cơ sở dữ liệu hiện tại:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql> LOAD DATA LOCAL INFILE \'dump.txt\' INTO TABLE sinhvienk60;\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p>Nếu từ khóa LOCAL không có mặt, MySQL tìm kiếm datafile trên Server host bởi nhìn vào pathname tuyệt đối xác định vị trí của file đó, bắt đầu từ Root của hệ thống file. MySQL đọc file từ vị trí đã cho.</p></li>\r\n<li><p>Theo mặc định, LOAD DATA giả sử rằng datafile chứa các dòng mà được kết thúc bởi linefeed (newline (dòng mới)) và các giá trị dữ liệu đó bên trong một line được phân biệt bởi các tab.</p></li>\r\n<li><p>Để xác định một định dạng file một cách tường minh, sử dụng một mệnh đề FIELDS để miêu tả đặc trưng của trường bên trong một line, và một mệnh đề LINES để xác định dãy line-ending. Lệnh LOAD DATA sau xác định rằng datafile chứa các giá trị được phân biệt nhau bởi dấu phảy và line kết thúc bởi ký tự carriage-return và newline (dòng mới).</p></li>\r\n</ul>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql> LOAD DATA LOCAL INFILE \'dump.txt\' INTO TABLE sinhvienk60\r\n  -> FIELDS TERMINATED BY \':\'\r\n  -> LINES TERMINATED BY \'\\r\\n\';\r\n</pre>\r\n<ul class=\"list\">\r\n<li><p>LOAD DATA giả sử các cột trong datafile có cùng thứ tự như các cột trong bảng. Nếu điều đó không đúng, bạn có thể xác định một danh sách để chỉ dẫn cột nào trong bản nên được tải vào. Giả sử bảng của bạn có các cột a, b, và c, nhưng các cột liên tiếp trong datafile là b, c và a. Bạn có thể tải file này như sau:</p></li>\r\n</ul>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql> LOAD DATA LOCAL INFILE \'dump.txt\' \r\n    -> INTO TABLE sinhvienk60 (b, c, a);\r\n</pre>\r\n<h2>Import với mysqlimport</h2>\r\n<p>MySQL cũng cung cấp một chương trình tiện ích tên là <b>mysqlimport</b> mà hoạt động như một Wrapper xung quanh LOAD DATA để mà bạn có thể tải input file một cách trực tiếp từ command line.</p>\r\n<p>Để tải một file từ dump.txt vào trong sinhvienk60, sử dụng lệnh sau tại UNIX prompt.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysqlimport -u root -p --local ten_database dump.txt\r\npassword *****\r\n</pre>\r\n<p>Nếu bạn sử dụng mysqlimport, tùy chọn command-line cung cấp các Format specidier. Các lệnh mysqlimport mà tương ứng với hai lệnh LOAD DATA trước đó sẽ trông giống như:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysqlimport -u root -p --local --fields-terminated-by=\":\" \\\r\n   --lines-terminated-by=\"\\r\\n\"  ten_database dump.txt\r\npassword *****\r\n</pre>\r\n<p>Thứ tự trong đó bạn xác định các tùy chọn không là vấn đề với mysqlimport, ngoại trừ rằng chúng nên đặt ở trước database name.</p>\r\n<p>Lệnh <b>mysqlimport</b> sử dụng tùy chọn --column để xác định thứ tự cột.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n$ mysqlimport -u root -p --local --columns=b,c,a \\\r\n    ten_database dump.txt\r\npassword *****\r\n</pre>\r\n<h2>Xử lý trích dẫn và các ký tự đặc biệt</h2>\r\n<p>Mệnh đề FIELDS có thể xác định các tùy chọn định dạng khác bên cạnh TERMINATED BY. Theo mặc định, LOAD DATA giả sử rằng các giá trị không được trích dẫn và thông dịch dấu gạch chéo ngược (\\) như là một ký tự thoát cho các ký tự đặc biệt. Để chỉ dẫn giá trị trích dẫn các ký tự một cách tường minh, sử dụng ENCLOSED BY. MySQL sẽ lược ký tự đó từ phần cuối dữ liệu trong khi xử lý input. Để thay đổi ký tự thoát mặc định, sử dụng ESCAPED BY.</p>\r\n<p>Khi bạn xác định ENCLOSED BY để chỉ rằng các ký tự trích dẫn nên bị lược bỏ từ các giá trị dữ liệu, nó là có thể để bao ký tự trích dẫn bên trong giá trị dữ liệu bằng việc sử dụng nó hai lần (tăng gấp đôi) hoặc bằng việc đặt trước nó với ký tự thoát. Ví dụ, nếu ký tự trích dẫn và ký tự thoát là \" và \\, thì giá trị đầu vào là \"a\"\"b\\\"c\" sẽ được thông dịch là a\"b\"c.</p>\r\n<p>Với mysqlimport, các tùy chọn command-line tương ứng để xác định giá trị trích dẫn và giá trị thoát là --fields-enclosed-by và --fields-escaped-by.</p>',2),(34,'Mệnh đề Group By','<h1>Mệnh đề GROUP BY trong MySQL</h1><p>Bạn có thể sử dụng mệnh đề <b>GROUP BY</b> để nhóm các giá trị từ một cột, và nếu bạn muốn, thực hiện việc tính toán trên cột đó. Bạn có thể sử dụng các hàm COUNT, SUM, AVG, … trên cột đã nhóm đó.</p>\r\n<p>Để hiểu cách sử dụng của mệnh đề GROUP BY, bạn theo dõi bảng sinhvienk58 có các bản ghi sau:</p><pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Nam        | 9.00    |\r\n|   2  | Nguyen Van     | Hoang      | 8.00    |\r\n|   3  | Nguyen Hoang   | Thang      | 8.00    |\r\n|   4  | Tran Van       | The	     | 9.00    |\r\n|   5  | Tran Van       | Chung	     | 9.50    |\r\n|   6  | Tran Van       | Cao	     | 8.50   |\r\n+------+----------------+------------+---------+\r\n</pre><p>Bây giờ, giả sử dựa vào bảng trên, chúng ta muốn đếm xem có bao nhiêu điểm thi là 8 hay là 9 chẳng hạn.</p>\r\n<p>Nếu bạn viết một truy vấn SQL như sau, thì bạn sẽ nhận được kết quả:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nmysql> SELECT COUNT(*) FROM sinhvienk58;\r\n\r\n//Ket qua la:\r\n+---------------------------+\r\n| COUNT(*)                  |\r\n+---------------------------+\r\n| 6                         |\r\n+---------------------------+\r\n</pre><p>Nhưng điều này không phù hợp với mục đích của bạn là muốn hiển thị từng số điểm thi mà sinh viên đạt được. Vì thế, bạn có thể thực hiện điều này bởi sử dụng các hàm tập hợp trong một mệnh đề GROUP BY như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT diemthi, COUNT(*)\r\n    FROM   sinhvienk58 \r\n    <b>GROUP BY</b> diemthi;\r\n\r\n//Ket qua la:\r\n+---------+----------+\r\n| diemthi | COUNT(*) |\r\n+---------+----------+\r\n|  8.00   |   2      |\r\n|  8.50   |   1      |\r\n|  9.00   |   2      |\r\n|  9.50   |   1      |\r\n+---------+----------+\r\n5 rows in set (0.04 sec)\r\n</pre>\r\n<p>Bạn sẽ thấy nhiều tính năng khác liên quan tới GROUP BY trong các hàm khác như SUM, AVG, …</p>',2),(35,'Mệnh đề In','<h1>Mệnh đề IN trong MySQL</h1><p>Bạn có thể sử dụng mệnh đề <b>IN</b> để thay thế cho nhiều điều kiện <b>OR</b> trong MySQL.</p>\r\n<p>Để hiểu hơn cách sử dụng của mệnh đề IN, bạn xem xét bảng sinhvienk58 có các bản ghi sau:</p><pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Nam        | 9.00    |\r\n|   2  | Nguyen Van     | Hoang      | 8.00    |\r\n|   3  | Nguyen Hoang   | Thang      | 8.00    |\r\n|   4  | Tran Van       | The	     | 9.00    |\r\n|   5  | Tran Van       | Chung	     | 9.50    |\r\n|   6  | Tran Van       | Cao	     | 8.50   |\r\n+------+----------------+------------+---------+\r\n</pre>\r\n<p>Bây giờ, giả sử dựa vào bảng trên, bạn muốn hiển thị các bản ghi có <b>diemthi</b> mà bằng với 8.50 và 9.00 và 9.50. Bạn có thể sử dụng các điều kiện <b>OR</b> như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk58 \r\n    WHERE diemthi= 8.50 OR  \r\n    diemthi= 9.00 OR  diemthi= 9.50; \r\n</pre>\r\n<p>Kết quả là:</p><pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Nam        | 9.00    |\r\n|   4  | Tran Van       | The	     | 9.00    |\r\n|   5  | Tran Van       | Chung	     | 9.50    |\r\n|   6  | Tran Van       | Cao	     | 8.50    |\r\n+------+----------------+------------+---------+\r\n</pre><p>Tuy nhiên, nếu bạn muốn HOẶC nhiều điều kiện, thì cú pháp trên có vẻ rất dài dòng. Việc này cũng có thể được thực hiện gọn nhẹ hơn bởi sử dụng mệnh đề <b>IN</b> trong MySQL, như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk58 \r\n    WHERE diemthi IN ( 8.50, 9.00, 9.50 );\r\n//Lenh nay cho ket qua nhu tren\r\n</pre>',2),(36,'Mệnh đề Between','<h1>Mệnh đề BETWEEN trong MySQL</h1><p>Bạn có thể sử dụng mệnh đề <b>BETWEEN</b> để thay thế một tổ hợp các điều kiện \"lớn hơn hoặc bằng AND nhỏ hơn hoặc bằng\".</p>\r\n<p>Để hiểu cách sử dụng mệnh đề BETWEEN, bạn xem xét bảng sinhvienk58 có các bản ghi sau:</p><pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Nam        | 9.00    |\r\n|   2  | Nguyen Van     | Hoang      | 8.00    |\r\n|   3  | Nguyen Hoang   | Thang      | 8.00    |\r\n|   4  | Tran Van       | The	     | 9.00    |\r\n|   5  | Tran Van       | Chung	     | 9.50    |\r\n|   6  | Tran Van       | Cao	     | 8.50   |\r\n+------+----------------+------------+---------+</pre>\r\n<p>Bây giờ, giả sử dựa vào bảng trên, bạn muốn lấy các bản ghi với điều kiện <b>diemthi</b> lớn hơn hoặc bằng 8.50 và nhỏ hơn hoặc bằng 9.50. Việc này có thể được thực hiện bởi sử dụng các điều kiện <b>>=</b> và <b><=</b> như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk58 \r\n    WHERE diemthi >= 8.50 AND\r\n    diemthi <= 9.50;\r\n</pre><p>Kết quả là:</p><pre class=\"prettyprint notranslate\">\r\n+------+----------------+------------+---------+\r\n| mssv | ho             | ten        | diemthi |\r\n+------+----------------+------------+---------+\r\n|   1  | Dinh Van       | Nam        | 9.00    |\r\n|   4  | Tran Van       | The	     | 9.00    |\r\n|   5  | Tran Van       | Chung	     | 9.50    |\r\n|   6  | Tran Van       | Cao	     | 8.50    |\r\n+------+----------------+------------+---------+\r\n</pre>\r\n<p>Để thu được kết quả tương tự, bạn có thể sử dụng mệnh đề <b>BETWEEN</b> trong MySQL như sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT * FROM sinhvienk58 \r\n    WHERE diemthi BETWEEN 8.50 AND 9.50; \r\n//Lenh nay cho ket qua nhu tren\r\n</pre>',2),(37,'Từ khóa Union','<h1>Từ khóa UNION trong MySQL</h1>\r\n<p>Bạn có thể sử dụng từ khóa <b>UNION</b> nếu bạn muốn lựa chọn các hàng (hàng này sau hàng kia) từ các bảng hoặc một số tập hợp các hàng từ một bảng đơn dưới dạng một tập kết quả đơn.</p>\r\n<p>UNION là có sẵn với MySQL 4.0. Chương này minh họa cách sử dụng nó.</p>\r\n<p>Giả sử bạn có 2 bảng: bảng <i>nhanvienIT</i> liệt kê các nhân viên IT chuyên sản xuất phần mềm và một bảng <i>nhanvienBH</i> chuyên bán các sản phẩm phần mềm, và một bảng thứ ba liệt kê chi nhánh của công ty bạn, và bạn muốn tạo một danh sách để liệt kê tất cả địa chỉ của nhân viên chẳng hạn. UNION cung cấp một cách để thực hiện điều này. Giả sử 3 bảng có nội dung sau:</p>\r\n<pre class=\"prettyprint notranslate\">\r\n//bang nhanvienIT co cac ban ghi sau:\r\nmysql> SELECT * FROM nhanvienIT;\r\n+--------------+-------+-----------------+\r\n| ho           | ten   |   diachi        |\r\n+--------------+-------+-----------------+\r\n| Nguyen Van   | Hoang |    Dong Da      |\r\n| Hoang Thanh  | Tung  |    Ba Dinh      |\r\n+--------------+-------+-----------------+\r\n\r\n//bang nhanvienBH co cac ban ghi sau:\r\nmysql> SELECT * FROM nhanvienBH;\r\n+--------+------------+--------------+\r\n| fname  | lname      |    addr      |\r\n+--------+------------+--------------+\r\n| Huong  | Tran Thi   | Kim Lien     |\r\n| Thanh  | Nguyen Ba  | Cau Giay     |\r\n| Tung   | Do Manh    | Hoang Mai    |\r\n+--------+------------+--------------+\r\n\r\n//bang chinhanhlamviec co cac ban ghi sau\r\nmysql> SELECT * FROM chinhanhlamviec;\r\n+-----------+--------------+\r\n| chinhanh  |   diachi     |\r\n+-----------+--------------+\r\n| Kim Lien  | 234 Xa Dan   |\r\n| Cau Giay  | 556 Cau Giay |\r\n+-----------+--------------+\r\n</pre><p>Việc 3 bảng có tên các cột khác nhau không là vấn đề gì. Truy vấn sau minh họa cách chọn <b>ten</b> và <b>diachi</b> từ 3 bảng cùng môt lúc:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT ho, ten, diachi FROM nhanvienIT\r\n UNION\r\n SELECT lname, fname, addr FROM nhanvienBH\r\n UNION\r\n SELECT chinhanh, \'\', diachi FROM chinhanhlamviec;\r\n</pre><p> Nếu bạn muốn lựa chọn tất cả bản ghi, bao gồm các bản sao, bạn sử dụng thêm ALL sau UNION:</p>\r\n<pre class=\"prettyprint notranslate\">\r\nSELECT ho, ten, diachi FROM nhanvienIT\r\n UNION ALL\r\n SELECT lname, fname, addr FROM nhanvienBH\r\n UNION\r\n SELECT chinhanh, \'\', diachi FROM chinhanhlamviec;\r\n</pre>',2),(48,'MongoDB - Giới thiệu','<h1 class=\"title\">Học MongoDB cơ bản và nâng cao</h1>\r\n<div class=\"center-aligned tutorial-menu\">\r\n \r\n</div>\r\n<p><b>[Học MongoDB cơ bản và nâng cao]</b>MongoDB là một cơ sở dữ liệu mã nguồn mở và là cơ sở dữ liệu NoSQL hàng đầu, được hàng triệu người sử dụng. MongoDB được viết bằng C++.</p>\r\n<p>Ngoài ra, MongoDB là một cơ sở dữ liệu đa nền tảng, hoạt động trên các khái niệm Collection và Document, nó cung cấp hiệu suất cao, tính khả dụng cao và khả năng mở rộng dễ dàng. </p>',3),(50,'MongoDB - Tổng quan','<h1>Tổng quan về MongoDB</h1><p>MongoDB là một cơ sở dữ liệu đa nền tảng, hoạt động trên các khái niệm Collection và Document, nó cung cấp hiệu suất cao, tính khả dụng cao và khả năng mở rộng dễ dàng. </p>\r\n<h2>Khái niệm Database</h2>\r\n<p>Database là một nơi chứa vật lý cho các Collection. Mỗi Database lấy tập hợp các file riêng của nó trên hệ thống file. Mỗi MongoDB Server có thể có nhiều cơ sở dữ liệu.</p>\r\n<h2>Khái niệm Collection</h2>\r\n<p>Collection là một nhóm các Document trong MongoDB. Nó tương đương như một bảng trong RDBMS. Do đó, một Collection tồn tại bên trong một cơ sở dữ liệu duy nhất. Các Collection không có ràng buộc Relationship như các hệ quản trị cơ sở dữ liệu khác nên việc truy xuất rất nhanh, chính vì thế mỗi collection có thể chứa nhiều thể loại khác nhau không giống như table trong hệ quản trị mysql là các field cố định. Các Document bên trong một Collection có thể có nhiều trường khác nhau. Đặc biệt, tất cả các Document trong một Collection là tương tự nhau hoặc với cùng mục đích liên quan.</p>\r\n<h2>Khái niệm Document</h2>\r\n<p>Một Document trong MongoDB, có cấu trúc tương tự như kiểu dữ liệu JSON, là một tập hợp các cặp key-value. Các Document có schema động, nghĩa là Document trong cùng một Collection không cần thiết phải có cùng một tập hợp các trường hoặc cấu trúc giống nhau, và các trường chung trong Document của một Collection có thể giữ các kiểu dữ liệu khác nhau.</p>\r\n<p>Below given table shows the relationship of RDBMS terminology with MongoDB</p>\r\n<table class=\"table table-bordered\">\r\n<tr>\r\n<th style=\"width:50%;\">RDBMS</th><th>MongoDB</th>\r\n</tr>\r\n<tr><td>Database</td>\r\n<td>Database</td></tr>\r\n<tr><td>Table</td><td>Collection</td></tr>\r\n<tr><td>Tuple/Row</td><td>Document</td></tr>\r\n<tr><td>column</td><td>Field</td></tr>\r\n<tr><td>Table Join</td><td>Embedded Documents</td></tr>\r\n<tr><td>Primary Key</td><td>Primary Key (Giá trị mặc định là _id được cung cấp bởi chính MongoDB)</td></tr>\r\n<tr><th colspan=\"2\">Database Server và Client</th></tr>\r\n<tr><td>Mysqld/Oracle</td><td>mongod</td></tr>\r\n<tr><td>mysql/sqlplus</td><td>mongo</td></tr>\r\n</table><h2>Cấu trúc Document đơn giản</h2>\r\n<p>Ví dụ dưới đây minh họa cấu trúc Document của một Blog site với một cặp key-value phân biệt bởi dấu phảy.</p>\r\n<pre class=\"prettyprint notranslate\">\r\n{\r\n   _id: ObjectId(7df78ad8902c)\r\n   title: \'MongoDB Overview\', \r\n   description: \'MongoDB is no sql database\',\r\n   by: \'tutorials point\',\r\n   url: \'http://www.tutorialspoint.com\',\r\n   tags: [\'mongodb\', \'database\', \'NoSQL\'],\r\n   likes: 100, \r\n   comments: [	\r\n      {\r\n         user:\'user1\',\r\n         message: \'My first comment\',\r\n         dateCreated: new Date(2011,1,20,2,15),\r\n         like: 0 \r\n      },\r\n      {\r\n         user:\'user2\',\r\n         message: \'My second comments\',\r\n         dateCreated: new Date(2011,1,25,7,45),\r\n         like: 5\r\n      }\r\n   ]\r\n}\r\n</pre>\r\n<p>Ở đây, <b>_id</b> là một số thập lục phân 12 byte để đảm bảo tính duy nhất của mỗi Document. Bạn có thể cung cấp _id trong khi chèn vào Document. Nếu bạn không cung cấp, thì MongoDB sẽ cung cấp một id duy nhất cho mỗi Document. Trong 12 byte này, 4 byte đầu là cho Timestamp hiện tại, 3 byte tiếp theo cho ID của thiết bị, 2 byte tiếp là process id của MongoDB Server và 3 byte còn lại là giá trị có thể tăng.</p>\r\n',3),(51,'MongoDB - Các lợi thế','',3),(52,'MongoDB - Cài đặt','',3),(53,'MongoDB - Data Modeling','',3),(54,'MongoDB - Tạo Database','',3),(55,'MongoDB - Xóa Database','',3),(56,'MongoDB - Tạo Collection','',3),(57,'MongoDB - Xóa Collection','',3),(58,'MongoDB - Kiểu dữ liệu','',3),(59,'MongoDB - Chèn Document','',3),(60,'MongoDB - Truy vấn Document','',3),(61,'MongoDB - Cập nhật Document','',3),(62,'MongoDB - Xóa Document','',3),(63,'MongoDB - Projection','',3),(64,'MongoDB - Giới hạn bản ghi','',3),(65,'MongoDB - Sắp xếp bản ghi','',3),(66,'MongoDB - Chỉ mục','',3),(67,'MongoDB - Aggregation','',3),(68,'MongoDB - Replica Set','',3),(69,'MongoDB - Shard','',3),(70,'MongoDB - Tạo Backup','',3),(71,'MongoDB - Deployment','',3),(72,'MongoDB Relationship','',3),(73,'MongoDB - Tham chiếu Database','',3),(74,'MongoDB - Covered Query','',3),(75,'MongoDB - Phân tích truy vấn','',3),(76,'MongoDB - Atomic Operation','',3),(77,'MongoDB - Chỉ mục nâng cao','',3),(78,'MongoDB - Hạn chế của chỉ mục','',3),(79,'MongoDB - ObjectId','',3),(80,'MongoDB - Map Reduce','',3),(81,'MongoDB - Text Search','',3),(82,'MongoDB - Regular Expression','',3),(83,'Làm việc với Rockmongo','',3),(84,'MongoDB - GridFS','',3),(85,'MongoDB - Capped Collection','',3),(86,'MongoDB Auto-Increment Sequence','',3),(87,'MongoDB - Tài liệu tham khảo','',3),(88,'lố','lố\r\n',4),(91,'Kiá»u Dá»¯ Liá»u','zÃ¢z',4);
/*!40000 ALTER TABLE `lesson` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-02-20 11:37:54
-- MySQL dump 10.13  Distrib 8.0.16, for Win64 (x86_64)
--
-- Host: localhost    Database: sqlmaster
-- ------------------------------------------------------
-- Server version	5.7.26-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
 SET NAMES utf8 ;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `permission`
--
